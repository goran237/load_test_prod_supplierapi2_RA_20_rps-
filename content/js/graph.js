/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9186.0, "minX": 0.0, "maxY": 55939.0, "series": [{"data": [[0.0, 9186.0], [0.1, 9186.0], [0.2, 9186.0], [0.3, 9186.0], [0.4, 9393.0], [0.5, 9393.0], [0.6, 9393.0], [0.7, 9393.0], [0.8, 9707.0], [0.9, 9707.0], [1.0, 9707.0], [1.1, 9707.0], [1.2, 9853.0], [1.3, 9853.0], [1.4, 9853.0], [1.5, 9916.0], [1.6, 9916.0], [1.7, 9916.0], [1.8, 9916.0], [1.9, 10313.0], [2.0, 10313.0], [2.1, 10313.0], [2.2, 10313.0], [2.3, 10395.0], [2.4, 10395.0], [2.5, 10395.0], [2.6, 10395.0], [2.7, 10488.0], [2.8, 10488.0], [2.9, 10488.0], [3.0, 10658.0], [3.1, 10658.0], [3.2, 10658.0], [3.3, 10658.0], [3.4, 11094.0], [3.5, 11094.0], [3.6, 11094.0], [3.7, 11094.0], [3.8, 11105.0], [3.9, 11105.0], [4.0, 11105.0], [4.1, 11105.0], [4.2, 11279.0], [4.3, 11279.0], [4.4, 11279.0], [4.5, 11360.0], [4.6, 11360.0], [4.7, 11360.0], [4.8, 11360.0], [4.9, 11585.0], [5.0, 11585.0], [5.1, 11585.0], [5.2, 11585.0], [5.3, 11638.0], [5.4, 11638.0], [5.5, 11638.0], [5.6, 12023.0], [5.7, 12023.0], [5.8, 12023.0], [5.9, 12023.0], [6.0, 12149.0], [6.1, 12149.0], [6.2, 12149.0], [6.3, 12149.0], [6.4, 12200.0], [6.5, 12200.0], [6.6, 12200.0], [6.7, 12200.0], [6.8, 12270.0], [6.9, 12270.0], [7.0, 12270.0], [7.1, 12423.0], [7.2, 12423.0], [7.3, 12423.0], [7.4, 12423.0], [7.5, 12523.0], [7.6, 12523.0], [7.7, 12523.0], [7.8, 12523.0], [7.9, 12617.0], [8.0, 12617.0], [8.1, 12617.0], [8.2, 12617.0], [8.3, 12650.0], [8.4, 12650.0], [8.5, 12650.0], [8.6, 12706.0], [8.7, 12706.0], [8.8, 12706.0], [8.9, 12706.0], [9.0, 12746.0], [9.1, 12746.0], [9.2, 12746.0], [9.3, 12746.0], [9.4, 12767.0], [9.5, 12767.0], [9.6, 12767.0], [9.7, 12767.0], [9.8, 12860.0], [9.9, 12860.0], [10.0, 12860.0], [10.1, 12870.0], [10.2, 12870.0], [10.3, 12870.0], [10.4, 12870.0], [10.5, 12976.0], [10.6, 12976.0], [10.7, 12976.0], [10.8, 12976.0], [10.9, 13090.0], [11.0, 13090.0], [11.1, 13090.0], [11.2, 13098.0], [11.3, 13098.0], [11.4, 13098.0], [11.5, 13098.0], [11.6, 13565.0], [11.7, 13565.0], [11.8, 13565.0], [11.9, 13565.0], [12.0, 13645.0], [12.1, 13645.0], [12.2, 13645.0], [12.3, 13645.0], [12.4, 13787.0], [12.5, 13787.0], [12.6, 13787.0], [12.7, 13941.0], [12.8, 13941.0], [12.9, 13941.0], [13.0, 13941.0], [13.1, 14126.0], [13.2, 14126.0], [13.3, 14126.0], [13.4, 14126.0], [13.5, 14488.0], [13.6, 14488.0], [13.7, 14488.0], [13.8, 14488.0], [13.9, 14501.0], [14.0, 14501.0], [14.1, 14501.0], [14.2, 14657.0], [14.3, 14657.0], [14.4, 14657.0], [14.5, 14657.0], [14.6, 14708.0], [14.7, 14708.0], [14.8, 14708.0], [14.9, 14708.0], [15.0, 14835.0], [15.1, 14835.0], [15.2, 14835.0], [15.3, 14851.0], [15.4, 14851.0], [15.5, 14851.0], [15.6, 14851.0], [15.7, 15307.0], [15.8, 15307.0], [15.9, 15307.0], [16.0, 15307.0], [16.1, 15465.0], [16.2, 15465.0], [16.3, 15465.0], [16.4, 15465.0], [16.5, 15510.0], [16.6, 15510.0], [16.7, 15510.0], [16.8, 15553.0], [16.9, 15553.0], [17.0, 15553.0], [17.1, 15553.0], [17.2, 15628.0], [17.3, 15628.0], [17.4, 15628.0], [17.5, 15628.0], [17.6, 15647.0], [17.7, 15647.0], [17.8, 15647.0], [17.9, 15647.0], [18.0, 15778.0], [18.1, 15778.0], [18.2, 15778.0], [18.3, 15796.0], [18.4, 15796.0], [18.5, 15796.0], [18.6, 15796.0], [18.7, 15903.0], [18.8, 15903.0], [18.9, 15903.0], [19.0, 15903.0], [19.1, 16155.0], [19.2, 16155.0], [19.3, 16155.0], [19.4, 16155.0], [19.5, 16454.0], [19.6, 16454.0], [19.7, 16454.0], [19.8, 16647.0], [19.9, 16647.0], [20.0, 16647.0], [20.1, 16647.0], [20.2, 16773.0], [20.3, 16773.0], [20.4, 16773.0], [20.5, 16773.0], [20.6, 16776.0], [20.7, 16776.0], [20.8, 16776.0], [20.9, 17035.0], [21.0, 17035.0], [21.1, 17035.0], [21.2, 17035.0], [21.3, 17051.0], [21.4, 17051.0], [21.5, 17051.0], [21.6, 17051.0], [21.7, 17413.0], [21.8, 17413.0], [21.9, 17413.0], [22.0, 17413.0], [22.1, 17780.0], [22.2, 17780.0], [22.3, 17780.0], [22.4, 17802.0], [22.5, 17802.0], [22.6, 17802.0], [22.7, 17802.0], [22.8, 17977.0], [22.9, 17977.0], [23.0, 17977.0], [23.1, 17977.0], [23.2, 18084.0], [23.3, 18084.0], [23.4, 18084.0], [23.5, 18084.0], [23.6, 18179.0], [23.7, 18179.0], [23.8, 18179.0], [23.9, 18225.0], [24.0, 18225.0], [24.1, 18225.0], [24.2, 18225.0], [24.3, 18393.0], [24.4, 18393.0], [24.5, 18393.0], [24.6, 18393.0], [24.7, 18485.0], [24.8, 18485.0], [24.9, 18485.0], [25.0, 18509.0], [25.1, 18509.0], [25.2, 18509.0], [25.3, 18509.0], [25.4, 18668.0], [25.5, 18668.0], [25.6, 18668.0], [25.7, 18668.0], [25.8, 18737.0], [25.9, 18737.0], [26.0, 18737.0], [26.1, 18737.0], [26.2, 18964.0], [26.3, 18964.0], [26.4, 18964.0], [26.5, 18998.0], [26.6, 18998.0], [26.7, 18998.0], [26.8, 18998.0], [26.9, 19009.0], [27.0, 19009.0], [27.1, 19009.0], [27.2, 19009.0], [27.3, 19225.0], [27.4, 19225.0], [27.5, 19225.0], [27.6, 19225.0], [27.7, 19271.0], [27.8, 19271.0], [27.9, 19271.0], [28.0, 19299.0], [28.1, 19299.0], [28.2, 19299.0], [28.3, 19299.0], [28.4, 19321.0], [28.5, 19321.0], [28.6, 19321.0], [28.7, 19321.0], [28.8, 19325.0], [28.9, 19325.0], [29.0, 19325.0], [29.1, 19325.0], [29.2, 19437.0], [29.3, 19437.0], [29.4, 19437.0], [29.5, 19631.0], [29.6, 19631.0], [29.7, 19631.0], [29.8, 19631.0], [29.9, 19632.0], [30.0, 19632.0], [30.1, 19632.0], [30.2, 19632.0], [30.3, 19702.0], [30.4, 19702.0], [30.5, 19702.0], [30.6, 19849.0], [30.7, 19849.0], [30.8, 19849.0], [30.9, 19849.0], [31.0, 20078.0], [31.1, 20078.0], [31.2, 20078.0], [31.3, 20078.0], [31.4, 20141.0], [31.5, 20141.0], [31.6, 20141.0], [31.7, 20141.0], [31.8, 20287.0], [31.9, 20287.0], [32.0, 20287.0], [32.1, 20477.0], [32.2, 20477.0], [32.3, 20477.0], [32.4, 20477.0], [32.5, 20547.0], [32.6, 20547.0], [32.7, 20547.0], [32.8, 20547.0], [32.9, 20815.0], [33.0, 20815.0], [33.1, 20815.0], [33.2, 20815.0], [33.3, 20819.0], [33.4, 20819.0], [33.5, 20819.0], [33.6, 20875.0], [33.7, 20875.0], [33.8, 20875.0], [33.9, 20875.0], [34.0, 20882.0], [34.1, 20882.0], [34.2, 20882.0], [34.3, 20882.0], [34.4, 21169.0], [34.5, 21169.0], [34.6, 21169.0], [34.7, 21169.0], [34.8, 21228.0], [34.9, 21228.0], [35.0, 21228.0], [35.1, 21308.0], [35.2, 21308.0], [35.3, 21308.0], [35.4, 21308.0], [35.5, 21442.0], [35.6, 21442.0], [35.7, 21442.0], [35.8, 21442.0], [35.9, 21518.0], [36.0, 21518.0], [36.1, 21518.0], [36.2, 21520.0], [36.3, 21520.0], [36.4, 21520.0], [36.5, 21520.0], [36.6, 21586.0], [36.7, 21586.0], [36.8, 21586.0], [36.9, 21586.0], [37.0, 21601.0], [37.1, 21601.0], [37.2, 21601.0], [37.3, 21601.0], [37.4, 21603.0], [37.5, 21603.0], [37.6, 21603.0], [37.7, 21786.0], [37.8, 21786.0], [37.9, 21786.0], [38.0, 21786.0], [38.1, 21907.0], [38.2, 21907.0], [38.3, 21907.0], [38.4, 21907.0], [38.5, 21912.0], [38.6, 21912.0], [38.7, 21912.0], [38.8, 21912.0], [38.9, 22030.0], [39.0, 22030.0], [39.1, 22030.0], [39.2, 22060.0], [39.3, 22060.0], [39.4, 22060.0], [39.5, 22060.0], [39.6, 22084.0], [39.7, 22084.0], [39.8, 22084.0], [39.9, 22084.0], [40.0, 22100.0], [40.1, 22100.0], [40.2, 22100.0], [40.3, 22149.0], [40.4, 22149.0], [40.5, 22149.0], [40.6, 22149.0], [40.7, 22261.0], [40.8, 22261.0], [40.9, 22261.0], [41.0, 22261.0], [41.1, 22288.0], [41.2, 22288.0], [41.3, 22288.0], [41.4, 22288.0], [41.5, 22339.0], [41.6, 22339.0], [41.7, 22339.0], [41.8, 22354.0], [41.9, 22354.0], [42.0, 22354.0], [42.1, 22354.0], [42.2, 22418.0], [42.3, 22418.0], [42.4, 22418.0], [42.5, 22418.0], [42.6, 22457.0], [42.7, 22457.0], [42.8, 22457.0], [42.9, 22457.0], [43.0, 22464.0], [43.1, 22464.0], [43.2, 22464.0], [43.3, 22484.0], [43.4, 22484.0], [43.5, 22484.0], [43.6, 22484.0], [43.7, 22504.0], [43.8, 22504.0], [43.9, 22504.0], [44.0, 22504.0], [44.1, 22555.0], [44.2, 22555.0], [44.3, 22555.0], [44.4, 22555.0], [44.5, 22600.0], [44.6, 22600.0], [44.7, 22600.0], [44.8, 22682.0], [44.9, 22682.0], [45.0, 22682.0], [45.1, 22682.0], [45.2, 22738.0], [45.3, 22738.0], [45.4, 22738.0], [45.5, 22738.0], [45.6, 22759.0], [45.7, 22759.0], [45.8, 22759.0], [45.9, 22835.0], [46.0, 22835.0], [46.1, 22835.0], [46.2, 22835.0], [46.3, 22885.0], [46.4, 22885.0], [46.5, 22885.0], [46.6, 22885.0], [46.7, 23007.0], [46.8, 23007.0], [46.9, 23007.0], [47.0, 23007.0], [47.1, 23044.0], [47.2, 23044.0], [47.3, 23044.0], [47.4, 23107.0], [47.5, 23107.0], [47.6, 23107.0], [47.7, 23107.0], [47.8, 23113.0], [47.9, 23113.0], [48.0, 23113.0], [48.1, 23113.0], [48.2, 23116.0], [48.3, 23116.0], [48.4, 23116.0], [48.5, 23116.0], [48.6, 23131.0], [48.7, 23131.0], [48.8, 23131.0], [48.9, 23169.0], [49.0, 23169.0], [49.1, 23169.0], [49.2, 23169.0], [49.3, 23186.0], [49.4, 23186.0], [49.5, 23186.0], [49.6, 23186.0], [49.7, 23406.0], [49.8, 23406.0], [49.9, 23406.0], [50.0, 23406.0], [50.1, 23444.0], [50.2, 23444.0], [50.3, 23444.0], [50.4, 23448.0], [50.5, 23448.0], [50.6, 23448.0], [50.7, 23448.0], [50.8, 23524.0], [50.9, 23524.0], [51.0, 23524.0], [51.1, 23524.0], [51.2, 23530.0], [51.3, 23530.0], [51.4, 23530.0], [51.5, 23579.0], [51.6, 23579.0], [51.7, 23579.0], [51.8, 23579.0], [51.9, 23627.0], [52.0, 23627.0], [52.1, 23627.0], [52.2, 23627.0], [52.3, 23644.0], [52.4, 23644.0], [52.5, 23644.0], [52.6, 23644.0], [52.7, 23659.0], [52.8, 23659.0], [52.9, 23659.0], [53.0, 23785.0], [53.1, 23785.0], [53.2, 23785.0], [53.3, 23785.0], [53.4, 23808.0], [53.5, 23808.0], [53.6, 23808.0], [53.7, 23808.0], [53.8, 23829.0], [53.9, 23829.0], [54.0, 23829.0], [54.1, 23829.0], [54.2, 23844.0], [54.3, 23844.0], [54.4, 23844.0], [54.5, 23919.0], [54.6, 23919.0], [54.7, 23919.0], [54.8, 23919.0], [54.9, 24246.0], [55.0, 24246.0], [55.1, 24246.0], [55.2, 24246.0], [55.3, 24319.0], [55.4, 24319.0], [55.5, 24319.0], [55.6, 24342.0], [55.7, 24342.0], [55.8, 24342.0], [55.9, 24342.0], [56.0, 24394.0], [56.1, 24394.0], [56.2, 24394.0], [56.3, 24394.0], [56.4, 24442.0], [56.5, 24442.0], [56.6, 24442.0], [56.7, 24442.0], [56.8, 24489.0], [56.9, 24489.0], [57.0, 24489.0], [57.1, 24692.0], [57.2, 24692.0], [57.3, 24692.0], [57.4, 24692.0], [57.5, 24761.0], [57.6, 24761.0], [57.7, 24761.0], [57.8, 24761.0], [57.9, 24770.0], [58.0, 24770.0], [58.1, 24770.0], [58.2, 24770.0], [58.3, 24778.0], [58.4, 24778.0], [58.5, 24778.0], [58.6, 24782.0], [58.7, 24782.0], [58.8, 24782.0], [58.9, 24782.0], [59.0, 24823.0], [59.1, 24823.0], [59.2, 24823.0], [59.3, 24823.0], [59.4, 24880.0], [59.5, 24880.0], [59.6, 24880.0], [59.7, 24880.0], [59.8, 24888.0], [59.9, 24888.0], [60.0, 24888.0], [60.1, 24919.0], [60.2, 24919.0], [60.3, 24919.0], [60.4, 24919.0], [60.5, 24920.0], [60.6, 24920.0], [60.7, 24920.0], [60.8, 24920.0], [60.9, 24960.0], [61.0, 24960.0], [61.1, 24960.0], [61.2, 25044.0], [61.3, 25044.0], [61.4, 25044.0], [61.5, 25044.0], [61.6, 25127.0], [61.7, 25127.0], [61.8, 25127.0], [61.9, 25127.0], [62.0, 25133.0], [62.1, 25133.0], [62.2, 25133.0], [62.3, 25133.0], [62.4, 25253.0], [62.5, 25253.0], [62.6, 25253.0], [62.7, 25257.0], [62.8, 25257.0], [62.9, 25257.0], [63.0, 25257.0], [63.1, 25319.0], [63.2, 25319.0], [63.3, 25319.0], [63.4, 25319.0], [63.5, 25490.0], [63.6, 25490.0], [63.7, 25490.0], [63.8, 25490.0], [63.9, 25492.0], [64.0, 25492.0], [64.1, 25492.0], [64.2, 25508.0], [64.3, 25508.0], [64.4, 25508.0], [64.5, 25508.0], [64.6, 25618.0], [64.7, 25618.0], [64.8, 25618.0], [64.9, 25618.0], [65.0, 25645.0], [65.1, 25645.0], [65.2, 25645.0], [65.3, 25658.0], [65.4, 25658.0], [65.5, 25658.0], [65.6, 25658.0], [65.7, 25737.0], [65.8, 25737.0], [65.9, 25737.0], [66.0, 25737.0], [66.1, 25876.0], [66.2, 25876.0], [66.3, 25876.0], [66.4, 25876.0], [66.5, 25956.0], [66.6, 25956.0], [66.7, 25956.0], [66.8, 26058.0], [66.9, 26058.0], [67.0, 26058.0], [67.1, 26058.0], [67.2, 26206.0], [67.3, 26206.0], [67.4, 26206.0], [67.5, 26206.0], [67.6, 26225.0], [67.7, 26225.0], [67.8, 26225.0], [67.9, 26225.0], [68.0, 26237.0], [68.1, 26237.0], [68.2, 26237.0], [68.3, 26514.0], [68.4, 26514.0], [68.5, 26514.0], [68.6, 26514.0], [68.7, 26653.0], [68.8, 26653.0], [68.9, 26653.0], [69.0, 26653.0], [69.1, 26686.0], [69.2, 26686.0], [69.3, 26686.0], [69.4, 26686.0], [69.5, 26894.0], [69.6, 26894.0], [69.7, 26894.0], [69.8, 26906.0], [69.9, 26906.0], [70.0, 26906.0], [70.1, 26906.0], [70.2, 26954.0], [70.3, 26954.0], [70.4, 26954.0], [70.5, 26954.0], [70.6, 27074.0], [70.7, 27074.0], [70.8, 27074.0], [70.9, 27225.0], [71.0, 27225.0], [71.1, 27225.0], [71.2, 27225.0], [71.3, 27601.0], [71.4, 27601.0], [71.5, 27601.0], [71.6, 27601.0], [71.7, 27664.0], [71.8, 27664.0], [71.9, 27664.0], [72.0, 27664.0], [72.1, 27851.0], [72.2, 27851.0], [72.3, 27851.0], [72.4, 27940.0], [72.5, 27940.0], [72.6, 27940.0], [72.7, 27940.0], [72.8, 27981.0], [72.9, 27981.0], [73.0, 27981.0], [73.1, 27981.0], [73.2, 27991.0], [73.3, 27991.0], [73.4, 27991.0], [73.5, 27991.0], [73.6, 28149.0], [73.7, 28149.0], [73.8, 28149.0], [73.9, 28195.0], [74.0, 28195.0], [74.1, 28195.0], [74.2, 28195.0], [74.3, 28260.0], [74.4, 28260.0], [74.5, 28260.0], [74.6, 28260.0], [74.7, 28335.0], [74.8, 28335.0], [74.9, 28335.0], [75.0, 28335.0], [75.1, 28348.0], [75.2, 28348.0], [75.3, 28348.0], [75.4, 28384.0], [75.5, 28384.0], [75.6, 28384.0], [75.7, 28384.0], [75.8, 28617.0], [75.9, 28617.0], [76.0, 28617.0], [76.1, 28617.0], [76.2, 28694.0], [76.3, 28694.0], [76.4, 28694.0], [76.5, 28758.0], [76.6, 28758.0], [76.7, 28758.0], [76.8, 28758.0], [76.9, 28807.0], [77.0, 28807.0], [77.1, 28807.0], [77.2, 28807.0], [77.3, 28938.0], [77.4, 28938.0], [77.5, 28938.0], [77.6, 28938.0], [77.7, 28951.0], [77.8, 28951.0], [77.9, 28951.0], [78.0, 29059.0], [78.1, 29059.0], [78.2, 29059.0], [78.3, 29059.0], [78.4, 29134.0], [78.5, 29134.0], [78.6, 29134.0], [78.7, 29134.0], [78.8, 29246.0], [78.9, 29246.0], [79.0, 29246.0], [79.1, 29246.0], [79.2, 29423.0], [79.3, 29423.0], [79.4, 29423.0], [79.5, 29532.0], [79.6, 29532.0], [79.7, 29532.0], [79.8, 29532.0], [79.9, 29741.0], [80.0, 29741.0], [80.1, 29741.0], [80.2, 29741.0], [80.3, 29771.0], [80.4, 29771.0], [80.5, 29771.0], [80.6, 29897.0], [80.7, 29897.0], [80.8, 29897.0], [80.9, 29897.0], [81.0, 29969.0], [81.1, 29969.0], [81.2, 29969.0], [81.3, 29969.0], [81.4, 30017.0], [81.5, 30017.0], [81.6, 30017.0], [81.7, 30017.0], [81.8, 30036.0], [81.9, 30036.0], [82.0, 30036.0], [82.1, 30195.0], [82.2, 30195.0], [82.3, 30195.0], [82.4, 30195.0], [82.5, 30538.0], [82.6, 30538.0], [82.7, 30538.0], [82.8, 30538.0], [82.9, 30637.0], [83.0, 30637.0], [83.1, 30637.0], [83.2, 30637.0], [83.3, 30776.0], [83.4, 30776.0], [83.5, 30776.0], [83.6, 30781.0], [83.7, 30781.0], [83.8, 30781.0], [83.9, 30781.0], [84.0, 30830.0], [84.1, 30830.0], [84.2, 30830.0], [84.3, 30830.0], [84.4, 31267.0], [84.5, 31267.0], [84.6, 31267.0], [84.7, 31267.0], [84.8, 32008.0], [84.9, 32008.0], [85.0, 32008.0], [85.1, 32180.0], [85.2, 32180.0], [85.3, 32180.0], [85.4, 32180.0], [85.5, 32385.0], [85.6, 32385.0], [85.7, 32385.0], [85.8, 32385.0], [85.9, 32675.0], [86.0, 32675.0], [86.1, 32675.0], [86.2, 32796.0], [86.3, 32796.0], [86.4, 32796.0], [86.5, 32796.0], [86.6, 33017.0], [86.7, 33017.0], [86.8, 33017.0], [86.9, 33017.0], [87.0, 33308.0], [87.1, 33308.0], [87.2, 33308.0], [87.3, 33308.0], [87.4, 33422.0], [87.5, 33422.0], [87.6, 33422.0], [87.7, 33449.0], [87.8, 33449.0], [87.9, 33449.0], [88.0, 33449.0], [88.1, 33488.0], [88.2, 33488.0], [88.3, 33488.0], [88.4, 33488.0], [88.5, 33597.0], [88.6, 33597.0], [88.7, 33597.0], [88.8, 33597.0], [88.9, 33668.0], [89.0, 33668.0], [89.1, 33668.0], [89.2, 33693.0], [89.3, 33693.0], [89.4, 33693.0], [89.5, 33693.0], [89.6, 33732.0], [89.7, 33732.0], [89.8, 33732.0], [89.9, 33732.0], [90.0, 33934.0], [90.1, 33934.0], [90.2, 33934.0], [90.3, 36150.0], [90.4, 36150.0], [90.5, 36150.0], [90.6, 36150.0], [90.7, 36297.0], [90.8, 36297.0], [90.9, 36297.0], [91.0, 36297.0], [91.1, 36570.0], [91.2, 36570.0], [91.3, 36570.0], [91.4, 36570.0], [91.5, 36662.0], [91.6, 36662.0], [91.7, 36662.0], [91.8, 36801.0], [91.9, 36801.0], [92.0, 36801.0], [92.1, 36801.0], [92.2, 37561.0], [92.3, 37561.0], [92.4, 37561.0], [92.5, 37561.0], [92.6, 38621.0], [92.7, 38621.0], [92.8, 38621.0], [92.9, 38621.0], [93.0, 38908.0], [93.1, 38908.0], [93.2, 38908.0], [93.3, 39145.0], [93.4, 39145.0], [93.5, 39145.0], [93.6, 39145.0], [93.7, 39524.0], [93.8, 39524.0], [93.9, 39524.0], [94.0, 39524.0], [94.1, 39707.0], [94.2, 39707.0], [94.3, 39707.0], [94.4, 39707.0], [94.5, 39725.0], [94.6, 39725.0], [94.7, 39725.0], [94.8, 41178.0], [94.9, 41178.0], [95.0, 41178.0], [95.1, 41178.0], [95.2, 41276.0], [95.3, 41276.0], [95.4, 41276.0], [95.5, 41276.0], [95.6, 41659.0], [95.7, 41659.0], [95.8, 41659.0], [95.9, 41695.0], [96.0, 41695.0], [96.1, 41695.0], [96.2, 41695.0], [96.3, 42427.0], [96.4, 42427.0], [96.5, 42427.0], [96.6, 42427.0], [96.7, 42834.0], [96.8, 42834.0], [96.9, 42834.0], [97.0, 42834.0], [97.1, 42885.0], [97.2, 42885.0], [97.3, 42885.0], [97.4, 43006.0], [97.5, 43006.0], [97.6, 43006.0], [97.7, 43006.0], [97.8, 43755.0], [97.9, 43755.0], [98.0, 43755.0], [98.1, 43755.0], [98.2, 44147.0], [98.3, 44147.0], [98.4, 44147.0], [98.5, 44147.0], [98.6, 44279.0], [98.7, 44279.0], [98.8, 44279.0], [98.9, 49379.0], [99.0, 49379.0], [99.1, 49379.0], [99.2, 49379.0], [99.3, 54040.0], [99.4, 54040.0], [99.5, 54040.0], [99.6, 54040.0], [99.7, 55939.0], [99.8, 55939.0], [99.9, 55939.0]], "isOverall": false, "label": "CreateRatesAvailability", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 9100.0, "maxY": 6.0, "series": [{"data": [[33700.0, 1.0], [33500.0, 1.0], [33300.0, 1.0], [33900.0, 1.0], [36500.0, 1.0], [36100.0, 1.0], [37500.0, 1.0], [38900.0, 1.0], [39700.0, 2.0], [39500.0, 1.0], [39100.0, 1.0], [41100.0, 1.0], [44100.0, 1.0], [43700.0, 1.0], [49300.0, 1.0], [55900.0, 1.0], [9100.0, 1.0], [9300.0, 1.0], [9700.0, 1.0], [9900.0, 1.0], [9800.0, 1.0], [10300.0, 2.0], [10400.0, 1.0], [10600.0, 1.0], [11200.0, 1.0], [11100.0, 1.0], [11000.0, 1.0], [11500.0, 1.0], [11600.0, 1.0], [11300.0, 1.0], [12200.0, 2.0], [12100.0, 1.0], [12000.0, 1.0], [12700.0, 3.0], [12600.0, 2.0], [12500.0, 1.0], [12400.0, 1.0], [12900.0, 1.0], [13000.0, 2.0], [12800.0, 2.0], [13600.0, 1.0], [13700.0, 1.0], [13500.0, 1.0], [14100.0, 1.0], [13900.0, 1.0], [14500.0, 1.0], [14800.0, 2.0], [14400.0, 1.0], [14700.0, 1.0], [14600.0, 1.0], [15300.0, 1.0], [15500.0, 2.0], [15700.0, 2.0], [15600.0, 2.0], [15400.0, 1.0], [16100.0, 1.0], [15900.0, 1.0], [17400.0, 1.0], [16400.0, 1.0], [16700.0, 2.0], [17000.0, 2.0], [16600.0, 1.0], [18000.0, 1.0], [18100.0, 1.0], [17900.0, 1.0], [17700.0, 1.0], [18300.0, 1.0], [18400.0, 1.0], [17800.0, 1.0], [18200.0, 1.0], [19300.0, 2.0], [19200.0, 3.0], [19400.0, 1.0], [18700.0, 1.0], [18600.0, 1.0], [19000.0, 1.0], [18500.0, 1.0], [18900.0, 2.0], [20100.0, 1.0], [20200.0, 1.0], [19600.0, 2.0], [20400.0, 1.0], [19700.0, 1.0], [20000.0, 1.0], [19800.0, 1.0], [20500.0, 1.0], [20800.0, 4.0], [21200.0, 1.0], [21300.0, 1.0], [21500.0, 3.0], [21400.0, 1.0], [21100.0, 1.0], [21600.0, 2.0], [22000.0, 3.0], [22100.0, 2.0], [21700.0, 1.0], [22400.0, 4.0], [21900.0, 2.0], [22200.0, 2.0], [22300.0, 2.0], [22500.0, 2.0], [22600.0, 2.0], [22800.0, 2.0], [23400.0, 3.0], [23100.0, 6.0], [23000.0, 2.0], [23500.0, 3.0], [22700.0, 2.0], [23700.0, 1.0], [24300.0, 3.0], [23900.0, 1.0], [23800.0, 3.0], [23600.0, 3.0], [24400.0, 2.0], [24200.0, 1.0], [24700.0, 4.0], [24800.0, 3.0], [24900.0, 3.0], [25100.0, 2.0], [25200.0, 2.0], [25300.0, 1.0], [25400.0, 2.0], [25000.0, 1.0], [24600.0, 1.0], [25500.0, 1.0], [26200.0, 3.0], [26600.0, 2.0], [26000.0, 1.0], [25700.0, 1.0], [25800.0, 1.0], [25900.0, 1.0], [26500.0, 1.0], [25600.0, 3.0], [27600.0, 2.0], [27000.0, 1.0], [26900.0, 2.0], [26800.0, 1.0], [27200.0, 1.0], [28300.0, 3.0], [28100.0, 2.0], [27900.0, 3.0], [28600.0, 2.0], [28200.0, 1.0], [27800.0, 1.0], [28800.0, 1.0], [29500.0, 1.0], [29000.0, 1.0], [29400.0, 1.0], [28900.0, 2.0], [28700.0, 1.0], [29200.0, 1.0], [29100.0, 1.0], [30000.0, 2.0], [30600.0, 1.0], [30100.0, 1.0], [30500.0, 1.0], [29900.0, 1.0], [29800.0, 1.0], [29700.0, 2.0], [30700.0, 2.0], [30800.0, 1.0], [31200.0, 1.0], [32000.0, 1.0], [32300.0, 1.0], [32600.0, 1.0], [32700.0, 1.0], [32100.0, 1.0], [33000.0, 1.0], [33400.0, 3.0], [33600.0, 2.0], [36200.0, 1.0], [36800.0, 1.0], [36600.0, 1.0], [38600.0, 1.0], [41200.0, 1.0], [41600.0, 2.0], [42800.0, 2.0], [42400.0, 1.0], [43000.0, 1.0], [44200.0, 1.0], [54000.0, 1.0]], "isOverall": false, "label": "CreateRatesAvailability", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 55900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 268.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 268.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 268.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.576154228E12, "maxY": 20.0, "series": [{"data": [[1.576154267E12, 20.0], [1.576154439E12, 20.0], [1.576154394E12, 20.0], [1.576154521E12, 20.0], [1.576154492E12, 20.0], [1.576154238E12, 20.0], [1.576154496E12, 20.0], [1.576154316E12, 20.0], [1.576154529E12, 15.0], [1.576154443E12, 20.0], [1.576154275E12, 20.0], [1.576154533E12, 3.5], [1.576154447E12, 20.0], [1.576154234E12, 20.0], [1.57615432E12, 20.0], [1.576154247E12, 20.0], [1.576154419E12, 20.0], [1.576154464E12, 20.0], [1.576154292E12, 20.0], [1.576154505E12, 20.0], [1.576154497E12, 20.0], [1.576154415E12, 20.0], [1.576154472E12, 20.0], [1.5761543E12, 20.0], [1.576154259E12, 20.0], [1.576154345E12, 20.0], [1.576154251E12, 20.0], [1.576154337E12, 20.0], [1.576154423E12, 20.0], [1.576154296E12, 20.0], [1.576154382E12, 20.0], [1.576154255E12, 20.0], [1.576154468E12, 20.0], [1.576154341E12, 20.0], [1.576154524E12, 18.0], [1.576154438E12, 20.0], [1.57615427E12, 20.0], [1.576154442E12, 20.0], [1.576154229E12, 20.0], [1.576154475E12, 20.0], [1.576154393E12, 20.0], [1.576154491E12, 20.0], [1.576154323E12, 20.0], [1.57615436E12, 20.0], [1.576154233E12, 20.0], [1.576154319E12, 20.0], [1.576154532E12, 8.0], [1.576154405E12, 20.0], [1.576154246E12, 20.0], [1.576154504E12, 20.0], [1.576154459E12, 20.0], [1.576154291E12, 20.0], [1.576154463E12, 20.0], [1.57615425E12, 20.0], [1.576154287E12, 20.0], [1.576154471E12, 20.0], [1.576154389E12, 20.0], [1.576154295E12, 20.0], [1.576154508E12, 20.0], [1.576154381E12, 20.0], [1.576154254E12, 20.0], [1.576154426E12, 20.0], [1.576154467E12, 20.0], [1.576154269E12, 20.0], [1.576154523E12, 20.0], [1.576154228E12, 20.0], [1.576154441E12, 20.0], [1.576154392E12, 20.0], [1.576154265E12, 20.0], [1.576154363E12, 20.0], [1.576154449E12, 20.0], [1.576154367E12, 20.0], [1.576154445E12, 20.0], [1.576154273E12, 20.0], [1.576154359E12, 20.0], [1.576154318E12, 20.0], [1.576154404E12, 20.0], [1.57615449E12, 20.0], [1.576154531E12, 13.0], [1.576154417E12, 20.0], [1.57615429E12, 20.0], [1.576154249E12, 20.0], [1.576154462E12, 20.0], [1.576154327E12, 20.0], [1.576154286E12, 20.0], [1.576154257E12, 20.0], [1.576154343E12, 20.0], [1.57615447E12, 20.0], [1.576154302E12, 20.0], [1.576154474E12, 20.0], [1.576154294E12, 20.0], [1.57615438E12, 20.0], [1.576154253E12, 20.0], [1.576154507E12, 20.0], [1.576154339E12, 20.0], [1.576154298E12, 20.0], [1.576154395E12, 20.0], [1.576154268E12, 20.0], [1.576154272E12, 20.0], [1.576154526E12, 16.0], [1.576154522E12, 20.0], [1.576154235E12, 20.0], [1.576154493E12, 20.0], [1.576154321E12, 20.0], [1.576154534E12, 1.5], [1.576154239E12, 20.0], [1.576154444E12, 20.0], [1.576154317E12, 20.0], [1.576154403E12, 20.0], [1.576154448E12, 20.0], [1.576154276E12, 20.0], [1.576154362E12, 20.0], [1.576154461E12, 20.0], [1.576154248E12, 20.0], [1.576154502E12, 20.0], [1.57615442E12, 20.0], [1.576154506E12, 20.0], [1.576154293E12, 20.0], [1.576154326E12, 20.0], [1.576154244E12, 20.0], [1.576154301E12, 20.0], [1.576154379E12, 20.0], [1.576154252E12, 20.0], [1.576154338E12, 20.0], [1.576154469E12, 20.0], [1.576154383E12, 20.0], [1.576154256E12, 20.0], [1.57615451E12, 20.0]], "isOverall": false, "label": "GetRatesAvailability", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.576154534E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9186.0, "minX": 1.0, "maxY": 31267.0, "series": [{"data": [[8.0, 9916.0], [2.0, 11360.0], [9.0, 21518.0], [10.0, 9707.0], [11.0, 25319.0], [12.0, 9393.0], [3.0, 10658.0], [13.0, 24246.0], [14.0, 23169.0], [15.0, 18998.0], [16.0, 20819.0], [4.0, 9853.0], [1.0, 12023.0], [17.0, 31267.0], [18.0, 19632.0], [19.0, 18964.0], [20.0, 24510.694779116457], [5.0, 11094.0], [6.0, 27601.0], [7.0, 9186.0]], "isOverall": false, "label": "CreateRatesAvailability", "isController": false}, {"data": [[19.291044776119406, 23984.64925373134]], "isOverall": false, "label": "CreateRatesAvailability-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 20.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8711.0, "minX": 1.576154228E12, "maxY": 567602.0, "series": [{"data": [[1.576154267E12, 194055.0], [1.576154439E12, 567602.0], [1.576154394E12, 177250.0], [1.576154521E12, 155586.0], [1.576154492E12, 214289.0], [1.576154238E12, 194862.0], [1.576154496E12, 8860.0], [1.576154316E12, 27016.0], [1.576154529E12, 9346.0], [1.576154443E12, 191393.0], [1.576154275E12, 10319.0], [1.576154533E12, 19301.0], [1.576154447E12, 10134.0], [1.576154234E12, 18514.0], [1.57615432E12, 10370.0], [1.576154247E12, 9334.0], [1.576154419E12, 56482.0], [1.576154464E12, 10509.0], [1.576154292E12, 9448.0], [1.576154505E12, 200505.0], [1.576154497E12, 19129.0], [1.576154415E12, 9200.0], [1.576154472E12, 176376.0], [1.5761543E12, 19338.0], [1.576154259E12, 9056.0], [1.576154345E12, 10242.0], [1.576154251E12, 8874.0], [1.576154337E12, 27739.0], [1.576154423E12, 19225.0], [1.576154296E12, 385934.0], [1.576154382E12, 340630.0], [1.576154255E12, 8715.0], [1.576154468E12, 156124.0], [1.576154341E12, 9404.0], [1.576154524E12, 237837.0], [1.576154438E12, 10447.0], [1.57615427E12, 175394.0], [1.576154442E12, 19193.0], [1.576154229E12, 347020.0], [1.576154475E12, 10442.0], [1.576154393E12, 245896.0], [1.576154491E12, 9141.0], [1.576154323E12, 167035.0], [1.57615436E12, 379673.0], [1.576154233E12, 19342.0], [1.576154319E12, 421017.0], [1.576154532E12, 370462.0], [1.576154405E12, 322086.0], [1.576154246E12, 9269.0], [1.576154504E12, 205590.0], [1.576154459E12, 27671.0], [1.576154291E12, 237818.0], [1.576154463E12, 8964.0], [1.57615425E12, 200939.0], [1.576154287E12, 184548.0], [1.576154471E12, 221263.0], [1.576154389E12, 10376.0], [1.576154295E12, 167110.0], [1.576154508E12, 10642.0], [1.576154381E12, 46491.0], [1.576154254E12, 176353.0], [1.576154426E12, 9395.0], [1.576154467E12, 9453.0], [1.576154269E12, 9148.0], [1.576154523E12, 185911.0], [1.576154228E12, 185721.0], [1.576154441E12, 9134.0], [1.576154392E12, 18545.0], [1.576154265E12, 9204.0], [1.576154363E12, 18745.0], [1.576154449E12, 10375.0], [1.576154367E12, 9335.0], [1.576154445E12, 8980.0], [1.576154273E12, 10281.0], [1.576154359E12, 19478.0], [1.576154318E12, 29533.0], [1.576154404E12, 29667.0], [1.57615449E12, 9398.0], [1.576154531E12, 28414.0], [1.576154417E12, 18135.0], [1.57615429E12, 9341.0], [1.576154249E12, 28773.0], [1.576154462E12, 8891.0], [1.576154327E12, 10019.0], [1.576154286E12, 19551.0], [1.576154257E12, 219214.0], [1.576154343E12, 10189.0], [1.57615447E12, 19832.0], [1.576154302E12, 156209.0], [1.576154474E12, 9139.0], [1.576154294E12, 19286.0], [1.57615438E12, 9079.0], [1.576154253E12, 9208.0], [1.576154507E12, 8972.0], [1.576154339E12, 9338.0], [1.576154298E12, 19652.0], [1.576154395E12, 229735.0], [1.576154268E12, 9136.0], [1.576154272E12, 191300.0], [1.576154526E12, 191215.0], [1.576154522E12, 47981.0], [1.576154235E12, 19723.0], [1.576154493E12, 384505.0], [1.576154321E12, 9199.0], [1.576154534E12, 19405.0], [1.576154239E12, 28771.0], [1.576154444E12, 167025.0], [1.576154317E12, 9139.0], [1.576154403E12, 18463.0], [1.576154448E12, 9264.0], [1.576154276E12, 9277.0], [1.576154362E12, 219342.0], [1.576154461E12, 19362.0], [1.576154248E12, 322746.0], [1.576154502E12, 9216.0], [1.57615442E12, 387178.0], [1.576154506E12, 9208.0], [1.576154293E12, 9206.0], [1.576154326E12, 155830.0], [1.576154244E12, 9387.0], [1.576154301E12, 8711.0], [1.576154379E12, 9133.0], [1.576154252E12, 19587.0], [1.576154338E12, 192477.0], [1.576154469E12, 173759.0], [1.576154383E12, 10571.0], [1.576154256E12, 19288.0], [1.57615451E12, 17901.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.576154267E12, 176879.0], [1.576154439E12, 309561.0], [1.576154394E12, 88411.0], [1.576154521E12, 44213.0], [1.576154492E12, 309563.0], [1.576154238E12, 221079.0], [1.576154496E12, 44225.0], [1.576154316E12, 132681.0], [1.576154529E12, 44232.0], [1.576154443E12, 44212.0], [1.576154275E12, 44229.0], [1.576154533E12, 88413.0], [1.576154447E12, 44188.0], [1.576154234E12, 88449.0], [1.57615432E12, 44210.0], [1.576154247E12, 44220.0], [1.576154419E12, 265329.0], [1.576154464E12, 44214.0], [1.576154292E12, 44192.0], [1.576154505E12, 88423.0], [1.576154497E12, 88439.0], [1.576154415E12, 44231.0], [1.576154472E12, 88442.0], [1.5761543E12, 88414.0], [1.576154259E12, 44192.0], [1.576154345E12, 44214.0], [1.576154251E12, 44234.0], [1.576154337E12, 132658.0], [1.576154423E12, 88444.0], [1.576154296E12, 265323.0], [1.576154382E12, 221077.0], [1.576154255E12, 44242.0], [1.576154468E12, 44202.0], [1.576154341E12, 44212.0], [1.576154524E12, 132633.0], [1.576154438E12, 44213.0], [1.57615427E12, 132664.0], [1.576154442E12, 88408.0], [1.576154229E12, 88382.0], [1.576154475E12, 44205.0], [1.576154393E12, 309550.0], [1.576154491E12, 44215.0], [1.576154323E12, 44209.0], [1.57615436E12, 176814.0], [1.576154233E12, 88443.0], [1.576154319E12, 132669.0], [1.576154532E12, 309520.0], [1.576154405E12, 132651.0], [1.576154246E12, 44228.0], [1.576154504E12, 221082.0], [1.576154459E12, 132678.0], [1.576154291E12, 132635.0], [1.576154463E12, 44212.0], [1.57615425E12, 88457.0], [1.576154287E12, 176888.0], [1.576154471E12, 176891.0], [1.576154389E12, 44212.0], [1.576154295E12, 44206.0], [1.576154508E12, 44225.0], [1.576154381E12, 221057.0], [1.576154254E12, 132656.0], [1.576154426E12, 44204.0], [1.576154467E12, 44202.0], [1.576154269E12, 44208.0], [1.576154523E12, 176874.0], [1.576154228E12, 132660.0], [1.576154441E12, 44208.0], [1.576154392E12, 88443.0], [1.576154265E12, 44206.0], [1.576154363E12, 88451.0], [1.576154449E12, 44226.0], [1.576154367E12, 44221.0], [1.576154445E12, 44224.0], [1.576154273E12, 44216.0], [1.576154359E12, 88383.0], [1.576154318E12, 132665.0], [1.576154404E12, 132640.0], [1.57615449E12, 44228.0], [1.576154531E12, 132666.0], [1.576154417E12, 88420.0], [1.57615429E12, 44232.0], [1.576154249E12, 132677.0], [1.576154462E12, 44215.0], [1.576154327E12, 44216.0], [1.576154286E12, 88453.0], [1.576154257E12, 44221.0], [1.576154343E12, 44208.0], [1.57615447E12, 88432.0], [1.576154302E12, 44235.0], [1.576154474E12, 44211.0], [1.576154294E12, 88438.0], [1.57615438E12, 44213.0], [1.576154253E12, 44242.0], [1.576154507E12, 44211.0], [1.576154339E12, 44223.0], [1.576154298E12, 88431.0], [1.576154395E12, 88451.0], [1.576154268E12, 44207.0], [1.576154272E12, 44219.0], [1.576154526E12, 44210.0], [1.576154522E12, 221152.0], [1.576154235E12, 88451.0], [1.576154493E12, 132644.0], [1.576154321E12, 44211.0], [1.576154534E12, 88438.0], [1.576154239E12, 132666.0], [1.576154444E12, 44194.0], [1.576154317E12, 44227.0], [1.576154403E12, 88426.0], [1.576154448E12, 44222.0], [1.576154276E12, 44240.0], [1.576154362E12, 44200.0], [1.576154461E12, 88449.0], [1.576154248E12, 88453.0], [1.576154502E12, 44234.0], [1.57615442E12, 221072.0], [1.576154506E12, 44215.0], [1.576154293E12, 44226.0], [1.576154326E12, 44223.0], [1.576154244E12, 44212.0], [1.576154301E12, 44230.0], [1.576154379E12, 44216.0], [1.576154252E12, 88445.0], [1.576154338E12, 221107.0], [1.576154469E12, 132680.0], [1.576154383E12, 44212.0], [1.576154256E12, 88418.0], [1.57615451E12, 88412.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.576154534E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10255.5, "minX": 1.576154228E12, "maxY": 49379.0, "series": [{"data": [[1.576154267E12, 18126.75], [1.576154439E12, 27898.14285714286], [1.576154394E12, 22915.5], [1.576154521E12, 28149.0], [1.576154492E12, 25263.285714285714], [1.576154238E12, 29371.4], [1.576154496E12, 24960.0], [1.576154316E12, 24746.333333333332], [1.576154529E12, 18998.0], [1.576154443E12, 22835.0], [1.576154275E12, 22682.0], [1.576154533E12, 10255.5], [1.576154447E12, 27225.0], [1.576154234E12, 25026.0], [1.57615432E12, 21786.0], [1.576154247E12, 12976.0], [1.576154419E12, 25593.5], [1.576154464E12, 24880.0], [1.576154292E12, 25257.0], [1.576154505E12, 23749.5], [1.576154497E12, 25969.5], [1.576154415E12, 22339.0], [1.576154472E12, 20425.5], [1.5761543E12, 12874.0], [1.576154259E12, 12767.0], [1.576154345E12, 26954.0], [1.576154251E12, 15628.0], [1.576154337E12, 38469.0], [1.576154423E12, 18969.5], [1.576154296E12, 20820.833333333332], [1.576154382E12, 36712.2], [1.576154255E12, 16773.0], [1.576154468E12, 28758.0], [1.576154341E12, 24823.0], [1.576154524E12, 23287.666666666668], [1.576154438E12, 33422.0], [1.57615427E12, 19646.333333333332], [1.576154442E12, 22657.0], [1.576154229E12, 20681.0], [1.576154475E12, 13787.0], [1.576154393E12, 17734.14285714286], [1.576154491E12, 27851.0], [1.576154323E12, 28195.0], [1.57615436E12, 37630.0], [1.576154233E12, 24824.5], [1.576154319E12, 24769.0], [1.576154532E12, 16334.428571428574], [1.576154405E12, 22395.666666666668], [1.576154246E12, 18084.0], [1.576154504E12, 24137.0], [1.576154459E12, 36169.0], [1.576154291E12, 26755.666666666668], [1.576154463E12, 24342.0], [1.57615425E12, 16253.5], [1.576154287E12, 30052.25], [1.576154471E12, 23136.75], [1.576154389E12, 28938.0], [1.576154295E12, 28348.0], [1.576154508E12, 15307.0], [1.576154381E12, 41216.2], [1.576154254E12, 15590.0], [1.576154426E12, 10395.0], [1.576154467E12, 25492.0], [1.576154269E12, 18485.0], [1.576154523E12, 21643.25], [1.576154228E12, 19562.333333333332], [1.576154441E12, 22464.0], [1.576154392E12, 27039.0], [1.576154265E12, 17977.0], [1.576154363E12, 25250.0], [1.576154449E12, 25618.0], [1.576154367E12, 29897.0], [1.576154445E12, 25645.0], [1.576154273E12, 18737.0], [1.576154359E12, 40140.0], [1.576154318E12, 23601.0], [1.576154404E12, 16979.0], [1.57615449E12, 28260.0], [1.576154531E12, 18936.0], [1.576154417E12, 23684.0], [1.57615429E12, 22600.0], [1.576154249E12, 15909.666666666666], [1.576154462E12, 22504.0], [1.576154327E12, 27074.0], [1.576154286E12, 28335.0], [1.576154257E12, 49379.0], [1.576154343E12, 23808.0], [1.57615447E12, 24319.5], [1.576154302E12, 14488.0], [1.576154474E12, 14835.0], [1.576154294E12, 23862.5], [1.57615438E12, 42834.0], [1.576154253E12, 14126.0], [1.576154507E12, 14657.0], [1.576154339E12, 21308.0], [1.576154298E12, 11652.5], [1.576154395E12, 23289.0], [1.576154268E12, 15647.0], [1.576154272E12, 21603.0], [1.576154526E12, 20819.0], [1.576154522E12, 25836.4], [1.576154235E12, 26221.5], [1.576154493E12, 33340.333333333336], [1.576154321E12, 24489.0], [1.576154534E12, 11691.5], [1.576154239E12, 30456.666666666668], [1.576154444E12, 23644.0], [1.576154317E12, 23044.0], [1.576154403E12, 21808.0], [1.576154448E12, 27940.0], [1.576154276E12, 19631.0], [1.576154362E12, 42885.0], [1.576154461E12, 22950.5], [1.576154248E12, 19381.0], [1.576154502E12, 28335.0], [1.57615442E12, 20476.8], [1.576154506E12, 13941.0], [1.576154293E12, 23448.0], [1.576154326E12, 29969.0], [1.576154244E12, 15510.0], [1.576154301E12, 10488.0], [1.576154379E12, 41695.0], [1.576154252E12, 15957.0], [1.576154338E12, 28222.6], [1.576154469E12, 26643.666666666668], [1.576154383E12, 23579.0], [1.576154256E12, 15224.5], [1.57615451E12, 15336.0]], "isOverall": false, "label": "CreateRatesAvailability", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.576154534E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 10255.5, "minX": 1.576154228E12, "maxY": 48867.0, "series": [{"data": [[1.576154267E12, 18028.75], [1.576154439E12, 27715.0], [1.576154394E12, 22723.5], [1.576154521E12, 27767.0], [1.576154492E12, 25208.571428571428], [1.576154238E12, 29293.8], [1.576154496E12, 24960.0], [1.576154316E12, 24746.333333333332], [1.576154529E12, 18998.0], [1.576154443E12, 22331.0], [1.576154275E12, 22682.0], [1.576154533E12, 10255.5], [1.576154447E12, 27225.0], [1.576154234E12, 25025.5], [1.57615432E12, 21786.0], [1.576154247E12, 12976.0], [1.576154419E12, 25593.5], [1.576154464E12, 24880.0], [1.576154292E12, 25257.0], [1.576154505E12, 23437.0], [1.576154497E12, 25969.5], [1.576154415E12, 22339.0], [1.576154472E12, 20229.5], [1.5761543E12, 12874.0], [1.576154259E12, 12767.0], [1.576154345E12, 26954.0], [1.576154251E12, 15628.0], [1.576154337E12, 38469.0], [1.576154423E12, 18969.5], [1.576154296E12, 20674.666666666668], [1.576154382E12, 36559.4], [1.576154255E12, 16773.0], [1.576154468E12, 28362.0], [1.576154341E12, 24823.0], [1.576154524E12, 23114.666666666668], [1.576154438E12, 33422.0], [1.57615427E12, 19518.333333333332], [1.576154442E12, 22657.0], [1.576154229E12, 20231.5], [1.576154475E12, 13787.0], [1.576154393E12, 17662.285714285714], [1.576154491E12, 27851.0], [1.576154323E12, 27803.0], [1.57615436E12, 37407.75], [1.576154233E12, 24824.5], [1.576154319E12, 24425.666666666668], [1.576154532E12, 16223.857142857143], [1.576154405E12, 22136.0], [1.576154246E12, 18084.0], [1.576154504E12, 24060.0], [1.576154459E12, 36169.0], [1.576154291E12, 26576.0], [1.576154463E12, 24342.0], [1.57615425E12, 16000.5], [1.576154287E12, 29955.75], [1.576154471E12, 23011.5], [1.576154389E12, 28938.0], [1.576154295E12, 27948.0], [1.576154508E12, 15307.0], [1.576154381E12, 41216.2], [1.576154254E12, 15461.666666666666], [1.576154426E12, 10395.0], [1.576154467E12, 25492.0], [1.576154269E12, 18485.0], [1.576154523E12, 21546.0], [1.576154228E12, 19432.0], [1.576154441E12, 22464.0], [1.576154392E12, 27039.0], [1.576154265E12, 17977.0], [1.576154363E12, 25250.0], [1.576154449E12, 25618.0], [1.576154367E12, 29897.0], [1.576154445E12, 25645.0], [1.576154273E12, 18737.0], [1.576154359E12, 40140.0], [1.576154318E12, 23600.666666666668], [1.576154404E12, 16979.0], [1.57615449E12, 28260.0], [1.576154531E12, 18936.0], [1.576154417E12, 23684.0], [1.57615429E12, 22600.0], [1.576154249E12, 15909.666666666666], [1.576154462E12, 22504.0], [1.576154327E12, 27074.0], [1.576154286E12, 28335.0], [1.576154257E12, 48867.0], [1.576154343E12, 23808.0], [1.57615447E12, 24319.5], [1.576154302E12, 14105.0], [1.576154474E12, 14835.0], [1.576154294E12, 23862.5], [1.57615438E12, 42834.0], [1.576154253E12, 14126.0], [1.576154507E12, 14657.0], [1.576154339E12, 21308.0], [1.576154298E12, 11652.5], [1.576154395E12, 23031.0], [1.576154268E12, 15647.0], [1.576154272E12, 21098.0], [1.576154526E12, 20318.0], [1.576154522E12, 25836.4], [1.576154235E12, 26221.5], [1.576154493E12, 33034.666666666664], [1.576154321E12, 24489.0], [1.576154534E12, 11691.5], [1.576154239E12, 30456.666666666668], [1.576154444E12, 23253.0], [1.576154317E12, 23044.0], [1.576154403E12, 21808.0], [1.576154448E12, 27940.0], [1.576154276E12, 19631.0], [1.576154362E12, 42363.0], [1.576154461E12, 22950.5], [1.576154248E12, 18997.5], [1.576154502E12, 28335.0], [1.57615442E12, 20297.2], [1.576154506E12, 13941.0], [1.576154293E12, 23448.0], [1.576154326E12, 29587.0], [1.576154244E12, 15510.0], [1.576154301E12, 10488.0], [1.576154379E12, 41695.0], [1.576154252E12, 15957.0], [1.576154338E12, 28145.6], [1.576154469E12, 26514.666666666668], [1.576154383E12, 23579.0], [1.576154256E12, 15224.5], [1.57615451E12, 15336.0]], "isOverall": false, "label": "CreateRatesAvailability", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.576154534E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 381.0, "minX": 1.576154228E12, "maxY": 466.5, "series": [{"data": [[1.576154267E12, 389.0], [1.576154439E12, 401.85714285714283], [1.576154394E12, 389.5], [1.576154521E12, 402.0], [1.576154492E12, 399.7142857142857], [1.576154238E12, 408.2], [1.576154496E12, 406.0], [1.576154316E12, 400.6666666666667], [1.576154529E12, 400.0], [1.576154443E12, 410.0], [1.576154275E12, 419.0], [1.576154533E12, 411.0], [1.576154447E12, 404.0], [1.576154234E12, 410.0], [1.57615432E12, 403.0], [1.576154247E12, 405.0], [1.576154419E12, 393.3333333333333], [1.576154464E12, 394.0], [1.576154292E12, 396.0], [1.576154505E12, 399.5], [1.576154497E12, 391.0], [1.576154415E12, 400.0], [1.576154472E12, 398.5], [1.5761543E12, 396.0], [1.576154259E12, 392.0], [1.576154345E12, 410.0], [1.576154251E12, 398.0], [1.576154337E12, 394.6666666666667], [1.576154423E12, 399.5], [1.576154296E12, 400.5], [1.576154382E12, 389.4], [1.576154255E12, 390.0], [1.576154468E12, 385.0], [1.576154341E12, 407.0], [1.576154524E12, 414.0], [1.576154438E12, 396.0], [1.57615427E12, 401.0], [1.576154442E12, 410.0], [1.576154229E12, 407.5], [1.576154475E12, 385.0], [1.576154393E12, 395.2857142857143], [1.576154491E12, 394.0], [1.576154323E12, 399.0], [1.57615436E12, 399.0], [1.576154233E12, 428.0], [1.576154319E12, 398.0], [1.576154532E12, 405.2857142857143], [1.576154405E12, 383.6666666666667], [1.576154246E12, 390.0], [1.576154504E12, 395.8], [1.576154459E12, 398.0], [1.576154291E12, 391.3333333333333], [1.576154463E12, 389.0], [1.57615425E12, 396.0], [1.576154287E12, 406.0], [1.576154471E12, 410.5], [1.576154389E12, 382.0], [1.576154295E12, 390.0], [1.576154508E12, 388.0], [1.576154381E12, 392.4], [1.576154254E12, 395.3333333333333], [1.576154426E12, 400.0], [1.576154467E12, 390.0], [1.576154269E12, 390.0], [1.576154523E12, 403.0], [1.576154228E12, 394.6666666666667], [1.576154441E12, 404.0], [1.576154392E12, 398.0], [1.576154265E12, 391.0], [1.576154363E12, 392.5], [1.576154449E12, 425.0], [1.576154367E12, 381.0], [1.576154445E12, 409.0], [1.576154273E12, 400.0], [1.576154359E12, 399.5], [1.576154318E12, 398.0], [1.576154404E12, 397.6666666666667], [1.57615449E12, 406.0], [1.576154531E12, 392.0], [1.576154417E12, 402.5], [1.57615429E12, 387.0], [1.576154249E12, 397.0], [1.576154462E12, 408.0], [1.576154327E12, 385.0], [1.576154286E12, 408.5], [1.576154257E12, 402.0], [1.576154343E12, 398.0], [1.57615447E12, 401.5], [1.576154302E12, 396.0], [1.576154474E12, 393.0], [1.576154294E12, 394.5], [1.57615438E12, 398.0], [1.576154253E12, 402.0], [1.576154507E12, 393.0], [1.576154339E12, 394.0], [1.576154298E12, 400.0], [1.576154395E12, 398.0], [1.576154268E12, 408.0], [1.576154272E12, 381.0], [1.576154526E12, 406.0], [1.576154522E12, 390.8], [1.576154235E12, 411.0], [1.576154493E12, 393.0], [1.576154321E12, 396.0], [1.576154534E12, 466.5], [1.576154239E12, 419.3333333333333], [1.576154444E12, 393.0], [1.576154317E12, 410.0], [1.576154403E12, 394.0], [1.576154448E12, 398.0], [1.576154276E12, 404.0], [1.576154362E12, 397.0], [1.576154461E12, 407.0], [1.576154248E12, 390.0], [1.576154502E12, 407.0], [1.57615442E12, 396.6], [1.576154506E12, 396.0], [1.576154293E12, 397.0], [1.576154326E12, 391.0], [1.576154244E12, 384.0], [1.576154301E12, 400.0], [1.576154379E12, 405.0], [1.576154252E12, 393.0], [1.576154338E12, 404.8], [1.576154469E12, 396.6666666666667], [1.576154383E12, 386.0], [1.576154256E12, 396.0], [1.57615451E12, 390.0]], "isOverall": false, "label": "CreateRatesAvailability", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.576154534E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9186.0, "minX": 1.576154228E12, "maxY": 55939.0, "series": [{"data": [[1.576154267E12, 19299.0], [1.576154439E12, 43755.0], [1.576154394E12, 33308.0], [1.576154521E12, 28149.0], [1.576154492E12, 30776.0], [1.576154238E12, 30036.0], [1.576154496E12, 24960.0], [1.576154316E12, 25490.0], [1.576154529E12, 18998.0], [1.576154443E12, 22835.0], [1.576154275E12, 22682.0], [1.576154533E12, 10658.0], [1.576154447E12, 27225.0], [1.576154234E12, 25133.0], [1.57615432E12, 21786.0], [1.576154247E12, 12976.0], [1.576154419E12, 26906.0], [1.576154464E12, 24880.0], [1.576154292E12, 25257.0], [1.576154505E12, 33934.0], [1.576154497E12, 26686.0], [1.576154415E12, 22339.0], [1.576154472E12, 27991.0], [1.5761543E12, 13098.0], [1.576154259E12, 12767.0], [1.576154345E12, 26954.0], [1.576154251E12, 15628.0], [1.576154337E12, 41276.0], [1.576154423E12, 19271.0], [1.576154296E12, 26225.0], [1.576154382E12, 55939.0], [1.576154255E12, 16773.0], [1.576154468E12, 28758.0], [1.576154341E12, 24823.0], [1.576154524E12, 31267.0], [1.576154438E12, 33422.0], [1.57615427E12, 21601.0], [1.576154442E12, 22759.0], [1.576154229E12, 20815.0], [1.576154475E12, 13787.0], [1.576154393E12, 32675.0], [1.576154491E12, 27851.0], [1.576154323E12, 28195.0], [1.57615436E12, 41178.0], [1.576154233E12, 24888.0], [1.576154319E12, 27664.0], [1.576154532E12, 27601.0], [1.576154405E12, 23007.0], [1.576154246E12, 18084.0], [1.576154504E12, 32796.0], [1.576154459E12, 38908.0], [1.576154291E12, 33597.0], [1.576154463E12, 24342.0], [1.57615425E12, 21228.0], [1.576154287E12, 33732.0], [1.576154471E12, 29246.0], [1.576154389E12, 28938.0], [1.576154295E12, 28348.0], [1.576154508E12, 15307.0], [1.576154381E12, 44279.0], [1.576154254E12, 16454.0], [1.576154426E12, 10395.0], [1.576154467E12, 25492.0], [1.576154269E12, 18485.0], [1.576154523E12, 30830.0], [1.576154228E12, 20141.0], [1.576154441E12, 22464.0], [1.576154392E12, 28951.0], [1.576154265E12, 17977.0], [1.576154363E12, 26058.0], [1.576154449E12, 25618.0], [1.576154367E12, 29897.0], [1.576154445E12, 25645.0], [1.576154273E12, 18737.0], [1.576154359E12, 41659.0], [1.576154318E12, 25044.0], [1.576154404E12, 22288.0], [1.57615449E12, 28260.0], [1.576154531E12, 24246.0], [1.576154417E12, 23844.0], [1.57615429E12, 22600.0], [1.576154249E12, 16155.0], [1.576154462E12, 22504.0], [1.576154327E12, 27074.0], [1.576154286E12, 30017.0], [1.576154257E12, 49379.0], [1.576154343E12, 23808.0], [1.57615447E12, 25508.0], [1.576154302E12, 14488.0], [1.576154474E12, 14835.0], [1.576154294E12, 24319.0], [1.57615438E12, 42834.0], [1.576154253E12, 14126.0], [1.576154507E12, 14657.0], [1.576154339E12, 21308.0], [1.576154298E12, 12200.0], [1.576154395E12, 33488.0], [1.576154268E12, 15647.0], [1.576154272E12, 21603.0], [1.576154526E12, 20819.0], [1.576154522E12, 29771.0], [1.576154235E12, 26237.0], [1.576154493E12, 54040.0], [1.576154321E12, 24489.0], [1.576154534E12, 12023.0], [1.576154239E12, 30637.0], [1.576154444E12, 23644.0], [1.576154317E12, 23044.0], [1.576154403E12, 22030.0], [1.576154448E12, 27940.0], [1.576154276E12, 19631.0], [1.576154362E12, 42885.0], [1.576154461E12, 23444.0], [1.576154248E12, 19437.0], [1.576154502E12, 28335.0], [1.57615442E12, 26894.0], [1.576154506E12, 13941.0], [1.576154293E12, 23448.0], [1.576154326E12, 29969.0], [1.576154244E12, 15510.0], [1.576154301E12, 10488.0], [1.576154379E12, 41695.0], [1.576154252E12, 17413.0], [1.576154338E12, 39725.0], [1.576154469E12, 30781.0], [1.576154383E12, 23579.0], [1.576154256E12, 18179.0], [1.57615451E12, 17802.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.576154267E12, 17035.0], [1.576154439E12, 19702.0], [1.576154394E12, 12523.0], [1.576154521E12, 28149.0], [1.576154492E12, 21520.0], [1.576154238E12, 28807.0], [1.576154496E12, 24960.0], [1.576154316E12, 23829.0], [1.576154529E12, 18998.0], [1.576154443E12, 22835.0], [1.576154275E12, 22682.0], [1.576154533E12, 9853.0], [1.576154447E12, 27225.0], [1.576154234E12, 24919.0], [1.57615432E12, 21786.0], [1.576154247E12, 12976.0], [1.576154419E12, 24394.0], [1.576154464E12, 24880.0], [1.576154292E12, 25257.0], [1.576154505E12, 13565.0], [1.576154497E12, 25253.0], [1.576154415E12, 22339.0], [1.576154472E12, 12860.0], [1.5761543E12, 12650.0], [1.576154259E12, 12767.0], [1.576154345E12, 26954.0], [1.576154251E12, 15628.0], [1.576154337E12, 36570.0], [1.576154423E12, 18668.0], [1.576154296E12, 10313.0], [1.576154382E12, 21912.0], [1.576154255E12, 16773.0], [1.576154468E12, 28758.0], [1.576154341E12, 24823.0], [1.576154524E12, 18964.0], [1.576154438E12, 33422.0], [1.57615427E12, 17051.0], [1.576154442E12, 22555.0], [1.576154229E12, 20547.0], [1.576154475E12, 13787.0], [1.576154393E12, 11585.0], [1.576154491E12, 27851.0], [1.576154323E12, 28195.0], [1.57615436E12, 33017.0], [1.576154233E12, 24761.0], [1.576154319E12, 23113.0], [1.576154532E12, 9186.0], [1.576154405E12, 21442.0], [1.576154246E12, 18084.0], [1.576154504E12, 12617.0], [1.576154459E12, 33449.0], [1.576154291E12, 22885.0], [1.576154463E12, 24342.0], [1.57615425E12, 11279.0], [1.576154287E12, 22084.0], [1.576154471E12, 12423.0], [1.576154389E12, 28938.0], [1.576154295E12, 28348.0], [1.576154508E12, 15307.0], [1.576154381E12, 36662.0], [1.576154254E12, 14851.0], [1.576154426E12, 10395.0], [1.576154467E12, 25492.0], [1.576154269E12, 18485.0], [1.576154523E12, 18225.0], [1.576154228E12, 19225.0], [1.576154441E12, 22464.0], [1.576154392E12, 25127.0], [1.576154265E12, 17977.0], [1.576154363E12, 24442.0], [1.576154449E12, 25618.0], [1.576154367E12, 29897.0], [1.576154445E12, 25645.0], [1.576154273E12, 18737.0], [1.576154359E12, 38621.0], [1.576154318E12, 22100.0], [1.576154404E12, 12746.0], [1.57615449E12, 28260.0], [1.576154531E12, 9393.0], [1.576154417E12, 23524.0], [1.57615429E12, 22600.0], [1.576154249E12, 15778.0], [1.576154462E12, 22504.0], [1.576154327E12, 27074.0], [1.576154286E12, 26653.0], [1.576154257E12, 49379.0], [1.576154343E12, 23808.0], [1.57615447E12, 23131.0], [1.576154302E12, 14488.0], [1.576154474E12, 14835.0], [1.576154294E12, 23406.0], [1.57615438E12, 42834.0], [1.576154253E12, 14126.0], [1.576154507E12, 14657.0], [1.576154339E12, 21308.0], [1.576154298E12, 11105.0], [1.576154395E12, 13090.0], [1.576154268E12, 15647.0], [1.576154272E12, 21603.0], [1.576154526E12, 20819.0], [1.576154522E12, 19849.0], [1.576154235E12, 26206.0], [1.576154493E12, 22354.0], [1.576154321E12, 24489.0], [1.576154534E12, 11360.0], [1.576154239E12, 30195.0], [1.576154444E12, 23644.0], [1.576154317E12, 23044.0], [1.576154403E12, 21586.0], [1.576154448E12, 27940.0], [1.576154276E12, 19631.0], [1.576154362E12, 42885.0], [1.576154461E12, 22457.0], [1.576154248E12, 19325.0], [1.576154502E12, 28335.0], [1.57615442E12, 15553.0], [1.576154506E12, 13941.0], [1.576154293E12, 23448.0], [1.576154326E12, 29969.0], [1.576154244E12, 15510.0], [1.576154301E12, 10488.0], [1.576154379E12, 41695.0], [1.576154252E12, 14501.0], [1.576154338E12, 20882.0], [1.576154469E12, 21169.0], [1.576154383E12, 23579.0], [1.576154256E12, 12270.0], [1.57615451E12, 12870.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.576154267E12, 30083.7], [1.576154439E12, 38621.0], [1.576154394E12, 39615.5], [1.576154521E12, 36542.700000000004], [1.576154492E12, 36652.8], [1.576154238E12, 29683.2], [1.576154496E12, 36731.5], [1.576154316E12, 30099.600000000002], [1.576154529E12, 36223.5], [1.576154443E12, 38196.99999999999], [1.576154275E12, 29784.0], [1.576154533E12, 34598.800000000025], [1.576154447E12, 37879.000000000015], [1.576154234E12, 25133.0], [1.57615432E12, 30028.4], [1.576154247E12, 30435.1], [1.576154419E12, 38935.399999999994], [1.576154464E12, 37879.000000000015], [1.576154292E12, 30567.7], [1.576154505E12, 36616.0], [1.576154497E12, 36703.700000000004], [1.576154415E12, 39296.6], [1.576154472E12, 36801.0], [1.5761543E12, 30179.100000000002], [1.576154259E12, 30163.2], [1.576154345E12, 30637.0], [1.576154251E12, 30179.1], [1.576154337E12, 30503.7], [1.576154423E12, 38515.00000000001], [1.576154296E12, 30297.899999999998], [1.576154382E12, 39721.4], [1.576154255E12, 30067.8], [1.576154468E12, 37666.99999999999], [1.576154341E12, 30911.200000000004], [1.576154524E12, 36252.9], [1.576154438E12, 38303.000000000015], [1.57615427E12, 29935.2], [1.576154442E12, 38303.000000000015], [1.576154229E12, 20815.0], [1.576154475E12, 36773.200000000004], [1.576154393E12, 39652.100000000006], [1.576154491E12, 36745.4], [1.576154323E12, 30024.6], [1.57615436E12, 34758.000000000015], [1.576154233E12, 24888.0], [1.576154319E12, 30030.3], [1.576154532E12, 35042.0], [1.576154405E12, 39334.5], [1.576154246E12, 30469.4], [1.576154504E12, 36634.4], [1.576154459E12, 38409.000000000015], [1.576154291E12, 30577.6], [1.576154463E12, 37985.00000000001], [1.57615425E12, 30195.0], [1.576154287E12, 30469.4], [1.576154471E12, 36953.000000000015], [1.576154389E12, 39717.8], [1.576154295E12, 30503.7], [1.576154508E12, 36588.4], [1.576154381E12, 39578.9], [1.576154254E12, 30083.7], [1.576154426E12, 38409.000000000015], [1.576154467E12, 37773.000000000015], [1.576154269E12, 30051.9], [1.576154523E12, 36297.0], [1.576154228E12, 20141.0], [1.576154441E12, 38515.00000000001], [1.576154392E12, 39714.2], [1.576154265E12, 30147.3], [1.576154363E12, 36324.3], [1.576154449E12, 37666.99999999999], [1.576154367E12, 36297.0], [1.576154445E12, 37985.00000000001], [1.576154273E12, 29834.4], [1.576154359E12, 32309.6], [1.576154318E12, 30036.0], [1.576154404E12, 39448.200000000004], [1.57615449E12, 36759.3], [1.576154531E12, 36179.4], [1.576154417E12, 39220.8], [1.57615429E12, 30435.100000000002], [1.576154249E12, 30263.6], [1.576154462E12, 38091.0], [1.576154327E12, 30020.8], [1.576154286E12, 30020.8], [1.576154257E12, 30179.1], [1.576154343E12, 30774.100000000013], [1.57615447E12, 37256.99999999999], [1.576154302E12, 30147.3], [1.576154474E12, 36787.1], [1.576154294E12, 30538.0], [1.57615438E12, 36754.8], [1.576154253E12, 30131.4], [1.576154507E12, 36597.6], [1.576154339E12, 31048.299999999996], [1.576154298E12, 30229.300000000003], [1.576154395E12, 39578.9], [1.576154268E12, 30067.8], [1.576154272E12, 29884.800000000003], [1.576154526E12, 36238.2], [1.576154522E12, 36406.200000000004], [1.576154235E12, 26230.8], [1.576154493E12, 36745.4], [1.576154321E12, 30026.5], [1.576154534E12, 34155.599999999984], [1.576154239E12, 30538.0], [1.576154444E12, 38091.0], [1.576154317E12, 30083.7], [1.576154403E12, 39542.299999999996], [1.576154448E12, 37773.000000000015], [1.576154276E12, 29733.6], [1.576154362E12, 36378.9], [1.576154461E12, 38196.99999999999], [1.576154248E12, 30366.5], [1.576154502E12, 36689.8], [1.57615442E12, 38673.399999999994], [1.576154506E12, 36606.8], [1.576154293E12, 30557.8], [1.576154326E12, 30022.7], [1.576154244E12, 30503.7], [1.576154301E12, 30163.2], [1.576154379E12, 36542.700000000004], [1.576154252E12, 30147.3], [1.576154338E12, 31185.40000000001], [1.576154469E12, 37409.00000000001], [1.576154383E12, 39719.6], [1.576154256E12, 30036.0], [1.57615451E12, 36570.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.576154267E12, 49379.0], [1.576154439E12, 50690.99999999993], [1.576154394E12, 52987.00000000007], [1.576154521E12, 52128.99000000001], [1.576154492E12, 48307.999999999956], [1.576154238E12, 30036.0], [1.576154496E12, 52874.75], [1.576154316E12, 49379.0], [1.576154529E12, 51476.449999999946], [1.576154443E12, 50428.59999999998], [1.576154275E12, 49379.0], [1.576154533E12, 50917.129999999925], [1.576154447E12, 50231.799999999974], [1.576154234E12, 25133.0], [1.57615432E12, 49379.0], [1.576154247E12, 30637.0], [1.576154419E12, 51740.599999999904], [1.576154464E12, 49575.80000000001], [1.576154292E12, 49379.0], [1.576154505E12, 52408.65000000002], [1.576154497E12, 52781.529999999955], [1.576154415E12, 52265.39999999999], [1.576154472E12, 48869.00000000003], [1.5761543E12, 49379.0], [1.576154259E12, 49379.0], [1.576154345E12, 48568.70000000005], [1.576154251E12, 30637.0], [1.576154337E12, 49297.96999999996], [1.576154423E12, 51281.39999999995], [1.576154296E12, 49379.0], [1.576154382E12, 53839.80000000005], [1.576154255E12, 30637.0], [1.576154468E12, 49444.59999999994], [1.576154341E12, 48730.76000000002], [1.576154524E12, 51569.67], [1.576154438E12, 51150.20000000007], [1.57615427E12, 49379.0], [1.576154442E12, 50494.19999999992], [1.576154229E12, 20815.0], [1.576154475E12, 48766.99999999998], [1.576154393E12, 53118.19999999995], [1.576154491E12, 48664.99999999993], [1.576154323E12, 49379.0], [1.57615436E12, 48143.800000000025], [1.576154233E12, 24888.0], [1.576154319E12, 49379.0], [1.576154532E12, 51010.35000000011], [1.576154405E12, 52330.99999999993], [1.576154246E12, 30637.0], [1.576154504E12, 52501.869999999944], [1.576154459E12, 49903.799999999894], [1.576154291E12, 49379.0], [1.576154463E12, 49641.39999999995], [1.57615425E12, 30637.0], [1.576154287E12, 49379.0], [1.576154471E12, 48970.999999999935], [1.576154389E12, 53708.59999999998], [1.576154295E12, 49379.0], [1.576154508E12, 52268.82000000002], [1.576154381E12, 48002.00000000002], [1.576154254E12, 30637.0], [1.576154426E12, 51215.80000000001], [1.576154467E12, 49510.20000000007], [1.576154269E12, 49379.0], [1.576154523E12, 51709.5], [1.576154228E12, 20141.0], [1.576154441E12, 50625.39999999999], [1.576154392E12, 53577.39999999991], [1.576154265E12, 49379.0], [1.576154363E12, 48145.140000000014], [1.576154449E12, 50100.599999999904], [1.576154367E12, 48080.19999999998], [1.576154445E12, 50297.39999999991], [1.576154273E12, 49379.0], [1.576154359E12, 48452.59999999996], [1.576154318E12, 49379.0], [1.576154404E12, 52527.79999999993], [1.57615449E12, 48716.00000000002], [1.576154531E12, 51336.619999999944], [1.576154417E12, 52134.19999999992], [1.57615429E12, 49379.0], [1.576154249E12, 30637.0], [1.576154462E12, 49707.00000000007], [1.576154327E12, 49379.0], [1.576154286E12, 49379.0], [1.576154257E12, 49379.0], [1.576154343E12, 48649.729999999974], [1.57615447E12, 49175.000000000044], [1.576154302E12, 49379.0], [1.576154474E12, 48817.99999999993], [1.576154294E12, 49379.0], [1.57615438E12, 47950.32000000001], [1.576154253E12, 30637.0], [1.576154507E12, 52315.42999999998], [1.576154339E12, 48811.78999999994], [1.576154298E12, 49379.0], [1.576154395E12, 52855.80000000001], [1.576154268E12, 49379.0], [1.576154272E12, 49379.0], [1.576154526E12, 51523.060000000034], [1.576154522E12, 51895.939999999966], [1.576154235E12, 26237.0], [1.576154493E12, 52921.35999999996], [1.576154321E12, 49379.0], [1.576154534E12, 50823.91000000001], [1.576154239E12, 30637.0], [1.576154444E12, 50363.00000000004], [1.576154317E12, 49379.0], [1.576154403E12, 52724.59999999994], [1.576154448E12, 50166.200000000026], [1.576154276E12, 49379.0], [1.576154362E12, 48275.01999999999], [1.576154461E12, 49772.60000000001], [1.576154248E12, 30637.0], [1.576154502E12, 52734.92], [1.57615442E12, 51412.60000000001], [1.576154506E12, 52362.039999999935], [1.576154293E12, 49379.0], [1.576154326E12, 49379.0], [1.576154244E12, 30637.0], [1.576154301E12, 49379.0], [1.576154379E12, 48015.25999999995], [1.576154252E12, 30637.0], [1.576154338E12, 48892.81999999998], [1.576154469E12, 49276.99999999995], [1.576154383E12, 53774.19999999992], [1.576154256E12, 30637.0], [1.57615451E12, 52175.59999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.576154267E12, 30602.35], [1.576154439E12, 42427.0], [1.576154394E12, 42732.25], [1.576154521E12, 41639.85], [1.576154492E12, 41639.85], [1.576154238E12, 30036.0], [1.576154496E12, 41686.0], [1.576154316E12, 32271.9], [1.576154529E12, 41371.75], [1.576154443E12, 42280.599999999984], [1.576154275E12, 30562.75], [1.576154533E12, 41241.7], [1.576154447E12, 42170.8], [1.576154234E12, 25133.0], [1.57615432E12, 32121.1], [1.576154247E12, 30622.15], [1.576154419E12, 42280.599999999984], [1.576154464E12, 41804.79999999998], [1.576154292E12, 33172.799999999996], [1.576154505E12, 41668.0], [1.576154497E12, 41682.4], [1.576154415E12, 42508.399999999994], [1.576154472E12, 41677.0], [1.5761543E12, 32366.15], [1.576154259E12, 30627.1], [1.576154345E12, 36433.5], [1.576154251E12, 30582.55], [1.576154337E12, 33725.25], [1.576154423E12, 42024.399999999994], [1.576154296E12, 32566.79999999999], [1.576154382E12, 42854.4], [1.576154255E12, 30547.9], [1.576154468E12, 41731.599999999984], [1.576154341E12, 36460.799999999996], [1.576154524E12, 41410.049999999996], [1.576154438E12, 41951.2], [1.57615427E12, 30577.6], [1.576154442E12, 42317.2], [1.576154229E12, 20815.0], [1.576154475E12, 41673.4], [1.576154393E12, 42772.95], [1.576154491E12, 41669.8], [1.576154323E12, 32083.399999999994], [1.57615436E12, 39564.2], [1.576154233E12, 24888.0], [1.576154319E12, 32139.949999999997], [1.576154532E12, 41251.5], [1.576154405E12, 42528.75], [1.576154246E12, 30627.1], [1.576154504E12, 41671.6], [1.576154459E12, 41987.79999999998], [1.576154291E12, 33233.399999999994], [1.576154463E12, 41841.399999999994], [1.57615425E12, 30587.5], [1.576154287E12, 32347.3], [1.576154471E12, 41680.6], [1.576154389E12, 42849.3], [1.576154295E12, 32930.4], [1.576154508E12, 41662.6], [1.576154381E12, 42170.799999999996], [1.576154254E12, 30552.85], [1.576154426E12, 41987.8], [1.576154467E12, 41768.2], [1.576154269E12, 30592.45], [1.576154523E12, 41467.5], [1.576154228E12, 20141.0], [1.576154441E12, 42390.399999999994], [1.576154392E12, 42844.2], [1.576154265E12, 30622.15], [1.576154363E12, 39797.649999999994], [1.576154449E12, 42097.599999999984], [1.576154367E12, 39725.0], [1.576154445E12, 42207.399999999994], [1.576154273E12, 30567.7], [1.576154359E12, 37984.99999999999], [1.576154318E12, 32196.5], [1.576154404E12, 42589.8], [1.57615449E12, 41671.6], [1.576154531E12, 41314.299999999996], [1.576154417E12, 42467.7], [1.57615429E12, 32328.449999999997], [1.576154249E12, 30597.4], [1.576154462E12, 41878.0], [1.576154327E12, 32045.699999999997], [1.576154286E12, 30547.899999999998], [1.576154257E12, 30632.05], [1.576154343E12, 36447.15], [1.57615447E12, 41687.8], [1.576154302E12, 32328.449999999997], [1.576154474E12, 41675.2], [1.576154294E12, 32991.0], [1.57615438E12, 41266.2], [1.576154253E12, 30567.7], [1.576154507E12, 41664.4], [1.576154339E12, 36474.45], [1.576154298E12, 32445.599999999995], [1.576154395E12, 42691.55], [1.576154268E12, 30597.399999999998], [1.576154272E12, 30572.649999999998], [1.576154526E12, 41390.899999999994], [1.576154522E12, 41544.1], [1.576154235E12, 26237.0], [1.576154493E12, 41687.8], [1.576154321E12, 32102.25], [1.576154534E12, 41231.9], [1.576154239E12, 30637.0], [1.576154444E12, 42244.0], [1.576154317E12, 32253.049999999996], [1.576154403E12, 42650.84999999999], [1.576154448E12, 42134.2], [1.576154276E12, 30557.8], [1.576154362E12, 39942.94999999999], [1.576154461E12, 41914.599999999984], [1.576154248E12, 30612.25], [1.576154502E12, 41680.6], [1.57615442E12, 42097.599999999984], [1.576154506E12, 41666.2], [1.576154293E12, 33112.19999999999], [1.576154326E12, 32064.549999999996], [1.576154244E12, 30632.05], [1.576154301E12, 32347.299999999996], [1.576154379E12, 41105.349999999984], [1.576154252E12, 30572.65], [1.576154338E12, 36488.1], [1.576154469E12, 41691.4], [1.576154383E12, 42851.85], [1.576154256E12, 30538.0], [1.57615451E12, 41659.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.576154534E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18759.0, "minX": 1000.0, "maxY": 23446.0, "series": [{"data": [[1000.0, 23446.0], [2000.0, 18759.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 18759.0, "minX": 1000.0, "maxY": 23246.0, "series": [{"data": [[1000.0, 23246.0], [2000.0, 18759.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 2000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.576154208E12, "maxY": 10.0, "series": [{"data": [[1.576154267E12, 3.0], [1.576154439E12, 7.0], [1.576154394E12, 2.0], [1.576154521E12, 1.0], [1.576154492E12, 7.0], [1.576154238E12, 5.0], [1.576154496E12, 1.0], [1.576154316E12, 3.0], [1.576154443E12, 1.0], [1.576154275E12, 1.0], [1.576154447E12, 1.0], [1.576154234E12, 2.0], [1.57615432E12, 1.0], [1.576154247E12, 1.0], [1.576154419E12, 6.0], [1.576154464E12, 1.0], [1.576154292E12, 1.0], [1.576154505E12, 2.0], [1.576154497E12, 2.0], [1.576154415E12, 1.0], [1.576154472E12, 2.0], [1.5761543E12, 2.0], [1.576154259E12, 1.0], [1.576154345E12, 1.0], [1.576154251E12, 1.0], [1.576154337E12, 3.0], [1.576154423E12, 2.0], [1.576154296E12, 6.0], [1.576154382E12, 5.0], [1.576154255E12, 1.0], [1.576154468E12, 1.0], [1.576154341E12, 1.0], [1.576154438E12, 1.0], [1.57615427E12, 3.0], [1.576154442E12, 2.0], [1.576154229E12, 2.0], [1.576154475E12, 1.0], [1.576154393E12, 7.0], [1.576154491E12, 1.0], [1.576154323E12, 1.0], [1.57615436E12, 4.0], [1.576154233E12, 2.0], [1.576154319E12, 3.0], [1.576154405E12, 3.0], [1.576154246E12, 1.0], [1.576154504E12, 5.0], [1.576154459E12, 3.0], [1.576154291E12, 3.0], [1.576154463E12, 1.0], [1.57615425E12, 2.0], [1.576154287E12, 4.0], [1.576154471E12, 4.0], [1.576154389E12, 1.0], [1.576154209E12, 10.0], [1.576154295E12, 1.0], [1.576154508E12, 1.0], [1.576154381E12, 5.0], [1.576154254E12, 3.0], [1.576154426E12, 1.0], [1.576154467E12, 1.0], [1.576154269E12, 1.0], [1.576154523E12, 3.0], [1.576154228E12, 3.0], [1.576154441E12, 1.0], [1.576154392E12, 2.0], [1.576154265E12, 1.0], [1.576154363E12, 2.0], [1.576154449E12, 1.0], [1.576154367E12, 1.0], [1.576154445E12, 1.0], [1.576154273E12, 1.0], [1.576154359E12, 2.0], [1.576154318E12, 3.0], [1.576154404E12, 3.0], [1.57615449E12, 1.0], [1.576154417E12, 2.0], [1.57615429E12, 1.0], [1.576154249E12, 3.0], [1.576154208E12, 10.0], [1.576154462E12, 1.0], [1.576154327E12, 1.0], [1.576154286E12, 2.0], [1.576154257E12, 1.0], [1.576154343E12, 1.0], [1.57615447E12, 2.0], [1.576154302E12, 1.0], [1.576154474E12, 1.0], [1.576154294E12, 2.0], [1.57615438E12, 1.0], [1.576154253E12, 1.0], [1.576154507E12, 1.0], [1.576154339E12, 1.0], [1.576154298E12, 2.0], [1.576154395E12, 2.0], [1.576154268E12, 2.0], [1.576154272E12, 1.0], [1.576154522E12, 5.0], [1.576154235E12, 2.0], [1.576154493E12, 3.0], [1.576154321E12, 1.0], [1.576154239E12, 3.0], [1.576154444E12, 1.0], [1.576154317E12, 1.0], [1.576154403E12, 2.0], [1.576154448E12, 1.0], [1.576154276E12, 1.0], [1.576154362E12, 1.0], [1.576154461E12, 2.0], [1.576154248E12, 2.0], [1.576154502E12, 1.0], [1.57615442E12, 5.0], [1.576154506E12, 1.0], [1.576154293E12, 1.0], [1.576154326E12, 1.0], [1.576154244E12, 1.0], [1.576154301E12, 1.0], [1.576154379E12, 1.0], [1.576154252E12, 2.0], [1.576154338E12, 5.0], [1.576154469E12, 3.0], [1.576154383E12, 1.0], [1.576154256E12, 2.0], [1.57615451E12, 2.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.576154523E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.576154228E12, "maxY": 7.0, "series": [{"data": [[1.576154267E12, 4.0], [1.576154439E12, 7.0], [1.576154394E12, 2.0], [1.576154521E12, 1.0], [1.576154492E12, 7.0], [1.576154238E12, 5.0], [1.576154496E12, 1.0], [1.576154316E12, 3.0], [1.576154529E12, 1.0], [1.576154443E12, 1.0], [1.576154275E12, 1.0], [1.576154533E12, 2.0], [1.576154447E12, 1.0], [1.576154234E12, 2.0], [1.57615432E12, 1.0], [1.576154247E12, 1.0], [1.576154419E12, 6.0], [1.576154464E12, 1.0], [1.576154292E12, 1.0], [1.576154505E12, 2.0], [1.576154497E12, 2.0], [1.576154415E12, 1.0], [1.576154472E12, 2.0], [1.5761543E12, 2.0], [1.576154259E12, 1.0], [1.576154345E12, 1.0], [1.576154251E12, 1.0], [1.576154337E12, 3.0], [1.576154423E12, 2.0], [1.576154296E12, 6.0], [1.576154382E12, 5.0], [1.576154255E12, 1.0], [1.576154468E12, 1.0], [1.576154341E12, 1.0], [1.576154524E12, 3.0], [1.576154438E12, 1.0], [1.57615427E12, 3.0], [1.576154442E12, 2.0], [1.576154229E12, 2.0], [1.576154475E12, 1.0], [1.576154393E12, 7.0], [1.576154491E12, 1.0], [1.576154323E12, 1.0], [1.57615436E12, 4.0], [1.576154233E12, 2.0], [1.576154319E12, 3.0], [1.576154532E12, 7.0], [1.576154405E12, 3.0], [1.576154246E12, 1.0], [1.576154504E12, 5.0], [1.576154459E12, 3.0], [1.576154291E12, 3.0], [1.576154463E12, 1.0], [1.57615425E12, 2.0], [1.576154287E12, 4.0], [1.576154471E12, 4.0], [1.576154389E12, 1.0], [1.576154295E12, 1.0], [1.576154508E12, 1.0], [1.576154381E12, 5.0], [1.576154254E12, 3.0], [1.576154426E12, 1.0], [1.576154467E12, 1.0], [1.576154269E12, 1.0], [1.576154523E12, 4.0], [1.576154228E12, 3.0], [1.576154441E12, 1.0], [1.576154392E12, 2.0], [1.576154265E12, 1.0], [1.576154363E12, 2.0], [1.576154449E12, 1.0], [1.576154367E12, 1.0], [1.576154445E12, 1.0], [1.576154273E12, 1.0], [1.576154359E12, 2.0], [1.576154318E12, 3.0], [1.576154404E12, 3.0], [1.57615449E12, 1.0], [1.576154531E12, 3.0], [1.576154417E12, 2.0], [1.57615429E12, 1.0], [1.576154249E12, 3.0], [1.576154462E12, 1.0], [1.576154327E12, 1.0], [1.576154286E12, 2.0], [1.576154257E12, 1.0], [1.576154343E12, 1.0], [1.57615447E12, 2.0], [1.576154302E12, 1.0], [1.576154474E12, 1.0], [1.576154294E12, 2.0], [1.57615438E12, 1.0], [1.576154253E12, 1.0], [1.576154507E12, 1.0], [1.576154339E12, 1.0], [1.576154298E12, 2.0], [1.576154395E12, 2.0], [1.576154268E12, 1.0], [1.576154272E12, 1.0], [1.576154526E12, 1.0], [1.576154522E12, 5.0], [1.576154235E12, 2.0], [1.576154493E12, 3.0], [1.576154321E12, 1.0], [1.576154534E12, 2.0], [1.576154239E12, 3.0], [1.576154444E12, 1.0], [1.576154317E12, 1.0], [1.576154403E12, 2.0], [1.576154448E12, 1.0], [1.576154276E12, 1.0], [1.576154362E12, 1.0], [1.576154461E12, 2.0], [1.576154248E12, 2.0], [1.576154502E12, 1.0], [1.57615442E12, 5.0], [1.576154506E12, 1.0], [1.576154293E12, 1.0], [1.576154326E12, 1.0], [1.576154244E12, 1.0], [1.576154301E12, 1.0], [1.576154379E12, 1.0], [1.576154252E12, 2.0], [1.576154338E12, 5.0], [1.576154469E12, 3.0], [1.576154383E12, 1.0], [1.576154256E12, 2.0], [1.57615451E12, 2.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.576154534E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.576154228E12, "maxY": 7.0, "series": [{"data": [[1.576154267E12, 4.0], [1.576154439E12, 7.0], [1.576154394E12, 2.0], [1.576154521E12, 1.0], [1.576154492E12, 7.0], [1.576154238E12, 5.0], [1.576154496E12, 1.0], [1.576154316E12, 3.0], [1.576154529E12, 1.0], [1.576154443E12, 1.0], [1.576154275E12, 1.0], [1.576154533E12, 2.0], [1.576154447E12, 1.0], [1.576154234E12, 2.0], [1.57615432E12, 1.0], [1.576154247E12, 1.0], [1.576154419E12, 6.0], [1.576154464E12, 1.0], [1.576154292E12, 1.0], [1.576154505E12, 2.0], [1.576154497E12, 2.0], [1.576154415E12, 1.0], [1.576154472E12, 2.0], [1.5761543E12, 2.0], [1.576154259E12, 1.0], [1.576154345E12, 1.0], [1.576154251E12, 1.0], [1.576154337E12, 3.0], [1.576154423E12, 2.0], [1.576154296E12, 6.0], [1.576154382E12, 5.0], [1.576154255E12, 1.0], [1.576154468E12, 1.0], [1.576154341E12, 1.0], [1.576154524E12, 3.0], [1.576154438E12, 1.0], [1.57615427E12, 3.0], [1.576154442E12, 2.0], [1.576154229E12, 2.0], [1.576154475E12, 1.0], [1.576154393E12, 7.0], [1.576154491E12, 1.0], [1.576154323E12, 1.0], [1.57615436E12, 4.0], [1.576154233E12, 2.0], [1.576154319E12, 3.0], [1.576154532E12, 7.0], [1.576154405E12, 3.0], [1.576154246E12, 1.0], [1.576154504E12, 5.0], [1.576154459E12, 3.0], [1.576154291E12, 3.0], [1.576154463E12, 1.0], [1.57615425E12, 2.0], [1.576154287E12, 4.0], [1.576154471E12, 4.0], [1.576154389E12, 1.0], [1.576154295E12, 1.0], [1.576154508E12, 1.0], [1.576154381E12, 5.0], [1.576154254E12, 3.0], [1.576154426E12, 1.0], [1.576154467E12, 1.0], [1.576154269E12, 1.0], [1.576154523E12, 4.0], [1.576154228E12, 3.0], [1.576154441E12, 1.0], [1.576154392E12, 2.0], [1.576154265E12, 1.0], [1.576154363E12, 2.0], [1.576154449E12, 1.0], [1.576154367E12, 1.0], [1.576154445E12, 1.0], [1.576154273E12, 1.0], [1.576154359E12, 2.0], [1.576154318E12, 3.0], [1.576154404E12, 3.0], [1.57615449E12, 1.0], [1.576154531E12, 3.0], [1.576154417E12, 2.0], [1.57615429E12, 1.0], [1.576154249E12, 3.0], [1.576154462E12, 1.0], [1.576154327E12, 1.0], [1.576154286E12, 2.0], [1.576154257E12, 1.0], [1.576154343E12, 1.0], [1.57615447E12, 2.0], [1.576154302E12, 1.0], [1.576154474E12, 1.0], [1.576154294E12, 2.0], [1.57615438E12, 1.0], [1.576154253E12, 1.0], [1.576154507E12, 1.0], [1.576154339E12, 1.0], [1.576154298E12, 2.0], [1.576154395E12, 2.0], [1.576154268E12, 1.0], [1.576154272E12, 1.0], [1.576154526E12, 1.0], [1.576154522E12, 5.0], [1.576154235E12, 2.0], [1.576154493E12, 3.0], [1.576154321E12, 1.0], [1.576154534E12, 2.0], [1.576154239E12, 3.0], [1.576154444E12, 1.0], [1.576154317E12, 1.0], [1.576154403E12, 2.0], [1.576154448E12, 1.0], [1.576154276E12, 1.0], [1.576154362E12, 1.0], [1.576154461E12, 2.0], [1.576154248E12, 2.0], [1.576154502E12, 1.0], [1.57615442E12, 5.0], [1.576154506E12, 1.0], [1.576154293E12, 1.0], [1.576154326E12, 1.0], [1.576154244E12, 1.0], [1.576154301E12, 1.0], [1.576154379E12, 1.0], [1.576154252E12, 2.0], [1.576154338E12, 5.0], [1.576154469E12, 3.0], [1.576154383E12, 1.0], [1.576154256E12, 2.0], [1.57615451E12, 2.0]], "isOverall": false, "label": "CreateRatesAvailability-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.576154534E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.576154228E12, "maxY": 7.0, "series": [{"data": [[1.576154267E12, 4.0], [1.576154439E12, 7.0], [1.576154394E12, 2.0], [1.576154521E12, 1.0], [1.576154492E12, 7.0], [1.576154238E12, 5.0], [1.576154496E12, 1.0], [1.576154316E12, 3.0], [1.576154529E12, 1.0], [1.576154443E12, 1.0], [1.576154275E12, 1.0], [1.576154533E12, 2.0], [1.576154447E12, 1.0], [1.576154234E12, 2.0], [1.57615432E12, 1.0], [1.576154247E12, 1.0], [1.576154419E12, 6.0], [1.576154464E12, 1.0], [1.576154292E12, 1.0], [1.576154505E12, 2.0], [1.576154497E12, 2.0], [1.576154415E12, 1.0], [1.576154472E12, 2.0], [1.5761543E12, 2.0], [1.576154259E12, 1.0], [1.576154345E12, 1.0], [1.576154251E12, 1.0], [1.576154337E12, 3.0], [1.576154423E12, 2.0], [1.576154296E12, 6.0], [1.576154382E12, 5.0], [1.576154255E12, 1.0], [1.576154468E12, 1.0], [1.576154341E12, 1.0], [1.576154524E12, 3.0], [1.576154438E12, 1.0], [1.57615427E12, 3.0], [1.576154442E12, 2.0], [1.576154229E12, 2.0], [1.576154475E12, 1.0], [1.576154393E12, 7.0], [1.576154491E12, 1.0], [1.576154323E12, 1.0], [1.57615436E12, 4.0], [1.576154233E12, 2.0], [1.576154319E12, 3.0], [1.576154532E12, 7.0], [1.576154405E12, 3.0], [1.576154246E12, 1.0], [1.576154504E12, 5.0], [1.576154459E12, 3.0], [1.576154291E12, 3.0], [1.576154463E12, 1.0], [1.57615425E12, 2.0], [1.576154287E12, 4.0], [1.576154471E12, 4.0], [1.576154389E12, 1.0], [1.576154295E12, 1.0], [1.576154508E12, 1.0], [1.576154381E12, 5.0], [1.576154254E12, 3.0], [1.576154426E12, 1.0], [1.576154467E12, 1.0], [1.576154269E12, 1.0], [1.576154523E12, 4.0], [1.576154228E12, 3.0], [1.576154441E12, 1.0], [1.576154392E12, 2.0], [1.576154265E12, 1.0], [1.576154363E12, 2.0], [1.576154449E12, 1.0], [1.576154367E12, 1.0], [1.576154445E12, 1.0], [1.576154273E12, 1.0], [1.576154359E12, 2.0], [1.576154318E12, 3.0], [1.576154404E12, 3.0], [1.57615449E12, 1.0], [1.576154531E12, 3.0], [1.576154417E12, 2.0], [1.57615429E12, 1.0], [1.576154249E12, 3.0], [1.576154462E12, 1.0], [1.576154327E12, 1.0], [1.576154286E12, 2.0], [1.576154257E12, 1.0], [1.576154343E12, 1.0], [1.57615447E12, 2.0], [1.576154302E12, 1.0], [1.576154474E12, 1.0], [1.576154294E12, 2.0], [1.57615438E12, 1.0], [1.576154253E12, 1.0], [1.576154507E12, 1.0], [1.576154339E12, 1.0], [1.576154298E12, 2.0], [1.576154395E12, 2.0], [1.576154268E12, 1.0], [1.576154272E12, 1.0], [1.576154526E12, 1.0], [1.576154522E12, 5.0], [1.576154235E12, 2.0], [1.576154493E12, 3.0], [1.576154321E12, 1.0], [1.576154534E12, 2.0], [1.576154239E12, 3.0], [1.576154444E12, 1.0], [1.576154317E12, 1.0], [1.576154403E12, 2.0], [1.576154448E12, 1.0], [1.576154276E12, 1.0], [1.576154362E12, 1.0], [1.576154461E12, 2.0], [1.576154248E12, 2.0], [1.576154502E12, 1.0], [1.57615442E12, 5.0], [1.576154506E12, 1.0], [1.576154293E12, 1.0], [1.576154326E12, 1.0], [1.576154244E12, 1.0], [1.576154301E12, 1.0], [1.576154379E12, 1.0], [1.576154252E12, 2.0], [1.576154338E12, 5.0], [1.576154469E12, 3.0], [1.576154383E12, 1.0], [1.576154256E12, 2.0], [1.57615451E12, 2.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.576154534E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

